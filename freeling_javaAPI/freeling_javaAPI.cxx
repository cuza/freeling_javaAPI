/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




 #include "freeling.h"
 #include "freeling/tree.h"
 #include "freeling/morfo/traces.h"

 using namespace std;


#include <stdexcept>


#include <list>
#include <stdexcept>

// Iterator class to allow stl list iterators to java
template<class T> class ListIterator  {
  private:
    list<T>* _list;
    typename std::list<T>::const_iterator _iter;

  public:
    ListIterator(std::list<T>* original) {
      this->_list = original;
      this->_iter = this->_list->begin();
    }
    
    bool hasNext() { return this->_iter != this->_list->end(); }
    
    T next() {
      T ret = (T) *this->_iter;
      this->_iter++;
      return ret;
    }
};
 


#include <vector>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <utility>

SWIGINTERN std::vector< freeling::word >::const_reference std_vector_Sl_freeling_word_Sg__get(std::vector< freeling::word > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_freeling_word_Sg__set(std::vector< freeling::word > *self,int i,std::vector< freeling::word >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::list< int > >::const_reference std_vector_Sl_std_list_Sl_int_Sg__Sg__get(std::vector< std::list< int > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_list_Sl_int_Sg__Sg__set(std::vector< std::list< int > > *self,int i,std::vector< std::list< int > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::list< std::wstring > >::const_reference std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg__get(std::vector< std::list< std::wstring > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg__set(std::vector< std::list< std::wstring > > *self,int i,std::vector< std::list< std::wstring > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::wstring >::const_reference std_vector_Sl_std_wstring_Sg__get(std::vector< std::wstring > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_wstring_Sg__set(std::vector< std::wstring > *self,int i,std::vector< std::wstring >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< double,std::wstring > >::const_reference std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg__get(std::vector< std::pair< double,std::wstring > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg__set(std::vector< std::pair< double,std::wstring > > *self,int i,std::vector< std::pair< double,std::wstring > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< std::wstring,std::wstring > >::const_reference std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg__get(std::vector< std::pair< std::wstring,std::wstring > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg__set(std::vector< std::pair< std::wstring,std::wstring > > *self,int i,std::vector< std::pair< std::wstring,std::wstring > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1VectorWord_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< freeling::word > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< freeling::word > *)new std::vector< freeling::word >();
  *(std::vector< freeling::word > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1VectorWord_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< freeling::word >::size_type arg1 ;
  std::vector< freeling::word > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< freeling::word >::size_type)jarg1; 
  result = (std::vector< freeling::word > *)new std::vector< freeling::word >(arg1);
  *(std::vector< freeling::word > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_VectorWord_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  std::vector< freeling::word >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< freeling::word > **)&jarg1; 
  result = ((std::vector< freeling::word > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_VectorWord_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  std::vector< freeling::word >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< freeling::word > **)&jarg1; 
  result = ((std::vector< freeling::word > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_VectorWord_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  std::vector< freeling::word >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< freeling::word > **)&jarg1; 
  arg2 = (std::vector< freeling::word >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_VectorWord_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< freeling::word > **)&jarg1; 
  result = (bool)((std::vector< freeling::word > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_VectorWord_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< freeling::word > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_VectorWord_1pushBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  std::vector< freeling::word >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< freeling::word > **)&jarg1; 
  arg2 = *(std::vector< freeling::word >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< freeling::word >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< freeling::word >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_VectorWord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  int arg2 ;
  std::vector< freeling::word >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< freeling::word > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< freeling::word >::value_type *) &std_vector_Sl_freeling_word_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< freeling::word >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_VectorWord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  int arg2 ;
  std::vector< freeling::word >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< freeling::word > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< freeling::word >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< freeling::word >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_freeling_word_Sg__set(arg1,arg2,(freeling::word const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1VectorWord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< freeling::word > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1ListWord_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< freeling::word > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< freeling::word > *)new std::list< freeling::word >();
  *(std::list< freeling::word > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1ListWord_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::list< freeling::word >::size_type arg1 ;
  std::list< freeling::word > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::list< freeling::word >::size_type)jarg1; 
  result = (std::list< freeling::word > *)new std::list< freeling::word >(arg1);
  *(std::list< freeling::word > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_ListWord_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  std::list< freeling::word >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::word > **)&jarg1; 
  result = ((std::list< freeling::word > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_ListWord_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::word > **)&jarg1; 
  result = (bool)((std::list< freeling::word > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListWord_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::word > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListWord_1reverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::word > **)&jarg1; 
  (arg1)->reverse();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListWord_1pushFront(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  std::list< freeling::word >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< freeling::word > **)&jarg1; 
  arg2 = *(std::list< freeling::word >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::word >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_front((std::list< freeling::word >::value_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListWord_1pushBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  std::list< freeling::word >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< freeling::word > **)&jarg1; 
  arg2 = *(std::list< freeling::word >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::word >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::list< freeling::word >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_ListWord_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  std::list< freeling::word >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::word > **)&jarg1; 
  result = (std::list< freeling::word >::value_type *) &(arg1)->front();
  *(std::list< freeling::word >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_ListWord_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  std::list< freeling::word >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::word > **)&jarg1; 
  result = (std::list< freeling::word >::value_type *) &(arg1)->back();
  *(std::list< freeling::word >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListWord_1popBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::word > **)&jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListWord_1popFront(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::word > **)&jarg1; 
  (arg1)->pop_front();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1ListWord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< freeling::word > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1ListAnalysis_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< freeling::analysis > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< freeling::analysis > *)new std::list< freeling::analysis >();
  *(std::list< freeling::analysis > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1ListAnalysis_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::list< freeling::analysis >::size_type arg1 ;
  std::list< freeling::analysis > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::list< freeling::analysis >::size_type)jarg1; 
  result = (std::list< freeling::analysis > *)new std::list< freeling::analysis >(arg1);
  *(std::list< freeling::analysis > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_ListAnalysis_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  std::list< freeling::analysis >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::analysis > **)&jarg1; 
  result = ((std::list< freeling::analysis > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_ListAnalysis_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::analysis > **)&jarg1; 
  result = (bool)((std::list< freeling::analysis > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListAnalysis_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::analysis > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListAnalysis_1reverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::analysis > **)&jarg1; 
  (arg1)->reverse();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListAnalysis_1pushFront(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  std::list< freeling::analysis >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< freeling::analysis > **)&jarg1; 
  arg2 = *(std::list< freeling::analysis >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::analysis >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_front((std::list< freeling::analysis >::value_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListAnalysis_1pushBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  std::list< freeling::analysis >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< freeling::analysis > **)&jarg1; 
  arg2 = *(std::list< freeling::analysis >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::analysis >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::list< freeling::analysis >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_ListAnalysis_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  std::list< freeling::analysis >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::analysis > **)&jarg1; 
  result = (std::list< freeling::analysis >::value_type *) &(arg1)->front();
  *(std::list< freeling::analysis >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_ListAnalysis_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  std::list< freeling::analysis >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::analysis > **)&jarg1; 
  result = (std::list< freeling::analysis >::value_type *) &(arg1)->back();
  *(std::list< freeling::analysis >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListAnalysis_1popBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::analysis > **)&jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListAnalysis_1popFront(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::analysis > **)&jarg1; 
  (arg1)->pop_front();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1ListAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< freeling::analysis > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1ListSentence_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< freeling::sentence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< freeling::sentence > *)new std::list< freeling::sentence >();
  *(std::list< freeling::sentence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1ListSentence_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::list< freeling::sentence >::size_type arg1 ;
  std::list< freeling::sentence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::list< freeling::sentence >::size_type)jarg1; 
  result = (std::list< freeling::sentence > *)new std::list< freeling::sentence >(arg1);
  *(std::list< freeling::sentence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_ListSentence_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  std::list< freeling::sentence >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::sentence > **)&jarg1; 
  result = ((std::list< freeling::sentence > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_ListSentence_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::sentence > **)&jarg1; 
  result = (bool)((std::list< freeling::sentence > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListSentence_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::sentence > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListSentence_1reverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::sentence > **)&jarg1; 
  (arg1)->reverse();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListSentence_1pushFront(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  std::list< freeling::sentence >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< freeling::sentence > **)&jarg1; 
  arg2 = *(std::list< freeling::sentence >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::sentence >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_front((std::list< freeling::sentence >::value_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListSentence_1pushBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  std::list< freeling::sentence >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< freeling::sentence > **)&jarg1; 
  arg2 = *(std::list< freeling::sentence >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::sentence >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::list< freeling::sentence >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_ListSentence_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  std::list< freeling::sentence >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::sentence > **)&jarg1; 
  result = (std::list< freeling::sentence >::value_type *) &(arg1)->front();
  *(std::list< freeling::sentence >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_ListSentence_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  std::list< freeling::sentence >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::sentence > **)&jarg1; 
  result = (std::list< freeling::sentence >::value_type *) &(arg1)->back();
  *(std::list< freeling::sentence >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListSentence_1popBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::sentence > **)&jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListSentence_1popFront(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::sentence > **)&jarg1; 
  (arg1)->pop_front();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1ListSentence(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< freeling::sentence > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1ListParagraph_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< freeling::paragraph > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< freeling::paragraph > *)new std::list< freeling::paragraph >();
  *(std::list< freeling::paragraph > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1ListParagraph_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::list< freeling::paragraph >::size_type arg1 ;
  std::list< freeling::paragraph > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::list< freeling::paragraph >::size_type)jarg1; 
  result = (std::list< freeling::paragraph > *)new std::list< freeling::paragraph >(arg1);
  *(std::list< freeling::paragraph > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_ListParagraph_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  std::list< freeling::paragraph >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::paragraph > **)&jarg1; 
  result = ((std::list< freeling::paragraph > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_ListParagraph_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::paragraph > **)&jarg1; 
  result = (bool)((std::list< freeling::paragraph > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListParagraph_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::paragraph > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListParagraph_1reverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::paragraph > **)&jarg1; 
  (arg1)->reverse();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListParagraph_1pushFront(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  std::list< freeling::paragraph >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< freeling::paragraph > **)&jarg1; 
  arg2 = *(std::list< freeling::paragraph >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::paragraph >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_front((std::list< freeling::paragraph >::value_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListParagraph_1pushBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  std::list< freeling::paragraph >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< freeling::paragraph > **)&jarg1; 
  arg2 = *(std::list< freeling::paragraph >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::paragraph >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::list< freeling::paragraph >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_ListParagraph_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  std::list< freeling::paragraph >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::paragraph > **)&jarg1; 
  result = (std::list< freeling::paragraph >::value_type *) &(arg1)->front();
  *(std::list< freeling::paragraph >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_ListParagraph_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  std::list< freeling::paragraph >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::paragraph > **)&jarg1; 
  result = (std::list< freeling::paragraph >::value_type *) &(arg1)->back();
  *(std::list< freeling::paragraph >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListParagraph_1popBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::paragraph > **)&jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListParagraph_1popFront(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::paragraph > **)&jarg1; 
  (arg1)->pop_front();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1ListParagraph(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< freeling::paragraph > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1ListSentenceIterator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  ListIterator< freeling::sentence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::sentence > **)&jarg1; 
  result = (ListIterator< freeling::sentence > *)new ListIterator< freeling::sentence >(arg1);
  *(ListIterator< freeling::sentence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_ListSentenceIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ListIterator< freeling::sentence > *arg1 = (ListIterator< freeling::sentence > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListIterator< freeling::sentence > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_ListSentenceIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListIterator< freeling::sentence > *arg1 = (ListIterator< freeling::sentence > *) 0 ;
  freeling::sentence result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListIterator< freeling::sentence > **)&jarg1; 
  result = (arg1)->next();
  *(freeling::sentence **)&jresult = new freeling::sentence((const freeling::sentence &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1ListSentenceIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListIterator< freeling::sentence > *arg1 = (ListIterator< freeling::sentence > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListIterator< freeling::sentence > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1ListWordIterator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  ListIterator< freeling::word > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::word > **)&jarg1; 
  result = (ListIterator< freeling::word > *)new ListIterator< freeling::word >(arg1);
  *(ListIterator< freeling::word > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_ListWordIterator_1hasNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ListIterator< freeling::word > *arg1 = (ListIterator< freeling::word > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListIterator< freeling::word > **)&jarg1; 
  result = (bool)(arg1)->hasNext();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_ListWordIterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ListIterator< freeling::word > *arg1 = (ListIterator< freeling::word > *) 0 ;
  freeling::word result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ListIterator< freeling::word > **)&jarg1; 
  result = (arg1)->next();
  *(freeling::word **)&jresult = new freeling::word((const freeling::word &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1ListWordIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ListIterator< freeling::word > *arg1 = (ListIterator< freeling::word > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ListIterator< freeling::word > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1ListString_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< std::wstring > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< std::wstring > *)new std::list< std::wstring >();
  *(std::list< std::wstring > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1ListString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::list< std::wstring >::size_type arg1 ;
  std::list< std::wstring > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::list< std::wstring >::size_type)jarg1; 
  result = (std::list< std::wstring > *)new std::list< std::wstring >(arg1);
  *(std::list< std::wstring > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_ListString_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  std::list< std::wstring >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::wstring > **)&jarg1; 
  result = ((std::list< std::wstring > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_ListString_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::wstring > **)&jarg1; 
  result = (bool)((std::list< std::wstring > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListString_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::wstring > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListString_1reverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::wstring > **)&jarg1; 
  (arg1)->reverse();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListString_1pushFront(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  std::list< std::wstring >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::wstring > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->push_front((std::list< std::wstring >::value_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListString_1pushBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  std::list< std::wstring >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::wstring > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->push_back((std::list< std::wstring >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_ListString_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  std::list< std::wstring >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::wstring > **)&jarg1; 
  result = (std::list< std::wstring >::value_type *) &(arg1)->front();
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_ListString_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  std::list< std::wstring >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::wstring > **)&jarg1; 
  result = (std::list< std::wstring >::value_type *) &(arg1)->back();
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListString_1popBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::wstring > **)&jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListString_1popFront(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::wstring > **)&jarg1; 
  (arg1)->pop_front();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1ListString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< std::wstring > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1ListInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< int > *)new std::list< int >();
  *(std::list< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1ListInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::list< int >::size_type arg1 ;
  std::list< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::list< int >::size_type)jarg1; 
  result = (std::list< int > *)new std::list< int >(arg1);
  *(std::list< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_ListInt_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  result = ((std::list< int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_ListInt_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  result = (bool)((std::list< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListInt_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListInt_1reverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  (arg1)->reverse();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListInt_1pushFront(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::value_type *arg2 = 0 ;
  std::list< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  temp2 = (std::list< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_front((std::list< int >::value_type const &)*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListInt_1pushBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::value_type *arg2 = 0 ;
  std::list< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  temp2 = (std::list< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::list< int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_edu_upc_freeling_freelingJNI_ListInt_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  result = (std::list< int >::value_type *) &(arg1)->front();
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_edu_upc_freeling_freelingJNI_ListInt_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  result = (std::list< int >::value_type *) &(arg1)->back();
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListInt_1popBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ListInt_1popFront(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  (arg1)->pop_front();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1ListInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1VectorListInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::list< int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::list< int > > *)new std::vector< std::list< int > >();
  *(std::vector< std::list< int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1VectorListInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::list< int > >::size_type arg1 ;
  std::vector< std::list< int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::list< int > >::size_type)jarg1; 
  result = (std::vector< std::list< int > > *)new std::vector< std::list< int > >(arg1);
  *(std::vector< std::list< int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_VectorListInt_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  std::vector< std::list< int > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::list< int > > **)&jarg1; 
  result = ((std::vector< std::list< int > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_VectorListInt_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  std::vector< std::list< int > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::list< int > > **)&jarg1; 
  result = ((std::vector< std::list< int > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_VectorListInt_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  std::vector< std::list< int > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::list< int > > **)&jarg1; 
  arg2 = (std::vector< std::list< int > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_VectorListInt_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::list< int > > **)&jarg1; 
  result = (bool)((std::vector< std::list< int > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_VectorListInt_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::list< int > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_VectorListInt_1pushBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  std::vector< std::list< int > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::list< int > > **)&jarg1; 
  arg2 = *(std::vector< std::list< int > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::list< int > >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< std::list< int > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_VectorListInt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  int arg2 ;
  std::vector< std::list< int > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::list< int > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::list< int > >::value_type *) &std_vector_Sl_std_list_Sl_int_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::list< int > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_VectorListInt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  int arg2 ;
  std::vector< std::list< int > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::list< int > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::list< int > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::list< int > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_list_Sl_int_Sg__Sg__set(arg1,arg2,(std::list< int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1VectorListInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::list< int > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1VectorListString_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::list< std::wstring > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::list< std::wstring > > *)new std::vector< std::list< std::wstring > >();
  *(std::vector< std::list< std::wstring > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1VectorListString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::list< std::wstring > >::size_type arg1 ;
  std::vector< std::list< std::wstring > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::list< std::wstring > >::size_type)jarg1; 
  result = (std::vector< std::list< std::wstring > > *)new std::vector< std::list< std::wstring > >(arg1);
  *(std::vector< std::list< std::wstring > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_VectorListString_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  std::vector< std::list< std::wstring > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::list< std::wstring > > **)&jarg1; 
  result = ((std::vector< std::list< std::wstring > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_VectorListString_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  std::vector< std::list< std::wstring > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::list< std::wstring > > **)&jarg1; 
  result = ((std::vector< std::list< std::wstring > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_VectorListString_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  std::vector< std::list< std::wstring > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::list< std::wstring > > **)&jarg1; 
  arg2 = (std::vector< std::list< std::wstring > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_VectorListString_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::list< std::wstring > > **)&jarg1; 
  result = (bool)((std::vector< std::list< std::wstring > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_VectorListString_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::list< std::wstring > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_VectorListString_1pushBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  std::vector< std::list< std::wstring > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::list< std::wstring > > **)&jarg1; 
  arg2 = *(std::vector< std::list< std::wstring > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::list< std::wstring > >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< std::list< std::wstring > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_VectorListString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  int arg2 ;
  std::vector< std::list< std::wstring > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::list< std::wstring > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::list< std::wstring > >::value_type *) &std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::list< std::wstring > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_VectorListString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  int arg2 ;
  std::vector< std::list< std::wstring > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::list< std::wstring > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::list< std::wstring > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::list< std::wstring > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg__set(arg1,arg2,(std::list< std::wstring > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1VectorListString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::list< std::wstring > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1VectorString_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::wstring > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::wstring > *)new std::vector< std::wstring >();
  *(std::vector< std::wstring > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1VectorString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::wstring >::size_type arg1 ;
  std::vector< std::wstring > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::wstring >::size_type)jarg1; 
  result = (std::vector< std::wstring > *)new std::vector< std::wstring >(arg1);
  *(std::vector< std::wstring > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_VectorString_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::wstring > **)&jarg1; 
  result = ((std::vector< std::wstring > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_VectorString_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::wstring > **)&jarg1; 
  result = ((std::vector< std::wstring > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_VectorString_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::wstring > **)&jarg1; 
  arg2 = (std::vector< std::wstring >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_VectorString_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::wstring > **)&jarg1; 
  result = (bool)((std::vector< std::wstring > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_VectorString_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::wstring > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_VectorString_1pushBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::wstring > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->push_back((std::vector< std::wstring >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_VectorString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  int arg2 ;
  std::vector< std::wstring >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::wstring > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::wstring >::value_type *) &std_vector_Sl_std_wstring_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_VectorString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  int arg2 ;
  std::vector< std::wstring >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::wstring > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  try {
    std_vector_Sl_std_wstring_Sg__set(arg1,arg2,(std::wstring const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1VectorString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::wstring > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1PairDoubleString_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< double,std::wstring > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::pair< double,std::wstring > *)new std::pair< double,std::wstring >();
  *(std::pair< double,std::wstring > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1PairDoubleString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  std::wstring arg2 ;
  std::pair< double,std::wstring > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    (&arg2)->reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      (&arg2)->push_back((wchar_t)arg2_pstr[i]);
    }
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (std::pair< double,std::wstring > *)new std::pair< double,std::wstring >(arg1,arg2);
  *(std::pair< double,std::wstring > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1PairDoubleString_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< double,std::wstring > *arg1 = 0 ;
  std::pair< double,std::wstring > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< double,std::wstring > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< double,std::wstring > const & reference is null");
    return 0;
  } 
  result = (std::pair< double,std::wstring > *)new std::pair< double,std::wstring >((std::pair< double,std::wstring > const &)*arg1);
  *(std::pair< double,std::wstring > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_PairDoubleString_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::pair< double,std::wstring > *arg1 = (std::pair< double,std::wstring > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< double,std::wstring > **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT jdouble JNICALL Java_edu_upc_freeling_freelingJNI_PairDoubleString_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  std::pair< double,std::wstring > *arg1 = (std::pair< double,std::wstring > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< double,std::wstring > **)&jarg1; 
  result = (double) ((arg1)->first);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_PairDoubleString_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::pair< double,std::wstring > *arg1 = (std::pair< double,std::wstring > *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< double,std::wstring > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_PairDoubleString_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::pair< double,std::wstring > *arg1 = (std::pair< double,std::wstring > *) 0 ;
  std::wstring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< double,std::wstring > **)&jarg1; 
  result = (std::wstring *) & ((arg1)->second);
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1PairDoubleString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< double,std::wstring > *arg1 = (std::pair< double,std::wstring > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< double,std::wstring > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1VectorPairDoubleString_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::pair< double,std::wstring > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::pair< double,std::wstring > > *)new std::vector< std::pair< double,std::wstring > >();
  *(std::vector< std::pair< double,std::wstring > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1VectorPairDoubleString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::pair< double,std::wstring > >::size_type arg1 ;
  std::vector< std::pair< double,std::wstring > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::pair< double,std::wstring > >::size_type)jarg1; 
  result = (std::vector< std::pair< double,std::wstring > > *)new std::vector< std::pair< double,std::wstring > >(arg1);
  *(std::vector< std::pair< double,std::wstring > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_VectorPairDoubleString_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  std::vector< std::pair< double,std::wstring > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< double,std::wstring > > **)&jarg1; 
  result = ((std::vector< std::pair< double,std::wstring > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_VectorPairDoubleString_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  std::vector< std::pair< double,std::wstring > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< double,std::wstring > > **)&jarg1; 
  result = ((std::vector< std::pair< double,std::wstring > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_VectorPairDoubleString_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  std::vector< std::pair< double,std::wstring > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< double,std::wstring > > **)&jarg1; 
  arg2 = (std::vector< std::pair< double,std::wstring > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_VectorPairDoubleString_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< double,std::wstring > > **)&jarg1; 
  result = (bool)((std::vector< std::pair< double,std::wstring > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_VectorPairDoubleString_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< double,std::wstring > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_VectorPairDoubleString_1pushBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  std::vector< std::pair< double,std::wstring > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::pair< double,std::wstring > > **)&jarg1; 
  arg2 = *(std::vector< std::pair< double,std::wstring > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< double,std::wstring > >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< std::pair< double,std::wstring > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_VectorPairDoubleString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< double,std::wstring > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< double,std::wstring > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::pair< double,std::wstring > >::value_type *) &std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::pair< double,std::wstring > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_VectorPairDoubleString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< double,std::wstring > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::pair< double,std::wstring > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< double,std::wstring > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< double,std::wstring > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg__set(arg1,arg2,(std::pair< double,std::wstring > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1VectorPairDoubleString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::pair< double,std::wstring > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1PairStringString_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< std::wstring,std::wstring > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::pair< std::wstring,std::wstring > *)new std::pair< std::wstring,std::wstring >();
  *(std::pair< std::wstring,std::wstring > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1PairStringString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::wstring arg1 ;
  std::wstring arg2 ;
  std::pair< std::wstring,std::wstring > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  if (arg1_len) {
    (&arg1)->reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      (&arg1)->push_back((wchar_t)arg1_pstr[i]);
    }
  }
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    (&arg2)->reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      (&arg2)->push_back((wchar_t)arg2_pstr[i]);
    }
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (std::pair< std::wstring,std::wstring > *)new std::pair< std::wstring,std::wstring >(arg1,arg2);
  *(std::pair< std::wstring,std::wstring > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1PairStringString_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::wstring,std::wstring > *arg1 = 0 ;
  std::pair< std::wstring,std::wstring > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::wstring,std::wstring > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::wstring,std::wstring > const & reference is null");
    return 0;
  } 
  result = (std::pair< std::wstring,std::wstring > *)new std::pair< std::wstring,std::wstring >((std::pair< std::wstring,std::wstring > const &)*arg1);
  *(std::pair< std::wstring,std::wstring > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_PairStringString_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::pair< std::wstring,std::wstring > *arg1 = (std::pair< std::wstring,std::wstring > *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::wstring,std::wstring > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_PairStringString_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::pair< std::wstring,std::wstring > *arg1 = (std::pair< std::wstring,std::wstring > *) 0 ;
  std::wstring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::wstring,std::wstring > **)&jarg1; 
  result = (std::wstring *) & ((arg1)->first);
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_PairStringString_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::pair< std::wstring,std::wstring > *arg1 = (std::pair< std::wstring,std::wstring > *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::wstring,std::wstring > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_PairStringString_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::pair< std::wstring,std::wstring > *arg1 = (std::pair< std::wstring,std::wstring > *) 0 ;
  std::wstring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::wstring,std::wstring > **)&jarg1; 
  result = (std::wstring *) & ((arg1)->second);
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1PairStringString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< std::wstring,std::wstring > *arg1 = (std::pair< std::wstring,std::wstring > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< std::wstring,std::wstring > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1VectorPairStringString_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::wstring,std::wstring > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::pair< std::wstring,std::wstring > > *)new std::vector< std::pair< std::wstring,std::wstring > >();
  *(std::vector< std::pair< std::wstring,std::wstring > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1VectorPairStringString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::size_type arg1 ;
  std::vector< std::pair< std::wstring,std::wstring > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::pair< std::wstring,std::wstring > >::size_type)jarg1; 
  result = (std::vector< std::pair< std::wstring,std::wstring > > *)new std::vector< std::pair< std::wstring,std::wstring > >(arg1);
  *(std::vector< std::pair< std::wstring,std::wstring > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_VectorPairStringString_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::wstring,std::wstring > > **)&jarg1; 
  result = ((std::vector< std::pair< std::wstring,std::wstring > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_VectorPairStringString_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::wstring,std::wstring > > **)&jarg1; 
  result = ((std::vector< std::pair< std::wstring,std::wstring > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_VectorPairStringString_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::wstring,std::wstring > > **)&jarg1; 
  arg2 = (std::vector< std::pair< std::wstring,std::wstring > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_VectorPairStringString_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::wstring,std::wstring > > **)&jarg1; 
  result = (bool)((std::vector< std::pair< std::wstring,std::wstring > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_VectorPairStringString_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::wstring,std::wstring > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_VectorPairStringString_1pushBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::pair< std::wstring,std::wstring > > **)&jarg1; 
  arg2 = *(std::vector< std::pair< std::wstring,std::wstring > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< std::wstring,std::wstring > >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< std::pair< std::wstring,std::wstring > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_VectorPairStringString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< std::wstring,std::wstring > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< std::wstring,std::wstring > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::pair< std::wstring,std::wstring > >::value_type *) &std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::pair< std::wstring,std::wstring > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_VectorPairStringString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< std::wstring,std::wstring > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::pair< std::wstring,std::wstring > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< std::wstring,std::wstring > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< std::wstring,std::wstring > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg__set(arg1,arg2,(std::pair< std::wstring,std::wstring > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1VectorPairStringString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::pair< std::wstring,std::wstring > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1PairStringInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< std::wstring,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::pair< std::wstring,int > *)new std::pair< std::wstring,int >();
  *(std::pair< std::wstring,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1PairStringInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::wstring arg1 ;
  int arg2 ;
  std::pair< std::wstring,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  if (arg1_len) {
    (&arg1)->reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      (&arg1)->push_back((wchar_t)arg1_pstr[i]);
    }
  }
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  arg2 = (int)jarg2; 
  result = (std::pair< std::wstring,int > *)new std::pair< std::wstring,int >(arg1,arg2);
  *(std::pair< std::wstring,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1PairStringInt_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::wstring,int > *arg1 = 0 ;
  std::pair< std::wstring,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::wstring,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::wstring,int > const & reference is null");
    return 0;
  } 
  result = (std::pair< std::wstring,int > *)new std::pair< std::wstring,int >((std::pair< std::wstring,int > const &)*arg1);
  *(std::pair< std::wstring,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_PairStringInt_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::pair< std::wstring,int > *arg1 = (std::pair< std::wstring,int > *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::wstring,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_PairStringInt_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::pair< std::wstring,int > *arg1 = (std::pair< std::wstring,int > *) 0 ;
  std::wstring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::wstring,int > **)&jarg1; 
  result = (std::wstring *) & ((arg1)->first);
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_PairStringInt_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::pair< std::wstring,int > *arg1 = (std::pair< std::wstring,int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::wstring,int > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jint JNICALL Java_edu_upc_freeling_freelingJNI_PairStringInt_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< std::wstring,int > *arg1 = (std::pair< std::wstring,int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::wstring,int > **)&jarg1; 
  result = (int) ((arg1)->second);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1PairStringInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< std::wstring,int > *arg1 = (std::pair< std::wstring,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< std::wstring,int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1TreeIteratorNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *)new freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > >();
  *(freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1TreeIteratorNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1; 
  result = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *)new freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > >(arg1);
  *(freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1TreeIteratorNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = 0 ;
  freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const & reference is null");
    return 0;
  } 
  result = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *)new freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > >((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const &)*arg1);
  *(freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1TreeIteratorNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeIteratorNode_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
  freeling::tree< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > **)&jarg1; 
  result = (freeling::tree< freeling::node > *) &((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const *)arg1)->operator *();
  *(freeling::tree< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeIteratorNode_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
  freeling::tree< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > **)&jarg1; 
  result = (freeling::tree< freeling::node > *)((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const *)arg1)->operator ->();
  *(freeling::tree< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_TreeIteratorNode_1operator_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
  freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > **)&jarg1; 
  arg2 = *(freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const & reference is null");
    return 0;
  } 
  result = (bool)((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const *)arg1)->operator ==((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_TreeIteratorNode_1operator_1notequal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
  freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > **)&jarg1; 
  arg2 = *(freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const & reference is null");
    return 0;
  } 
  result = (bool)((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const *)arg1)->operator !=((freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeIteratorNode_1info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
  freeling::node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > **)&jarg1; 
  result = (freeling::node *)& ((*arg1)->info);
  *(freeling::node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeIteratorNode_1numChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > **)&jarg1; 
  result = (unsigned int)(*arg1)->num_children();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeIteratorNode_1nthChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
  unsigned int arg2 ;
  freeling::tree< freeling::node >::sibling_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (*arg1)->nth_child(arg2);
  *(freeling::tree< freeling::node >::sibling_iterator **)&jresult = new freeling::tree< freeling::node >::sibling_iterator((const freeling::tree< freeling::node >::sibling_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeIteratorNode_1getParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
  freeling::tree< freeling::node >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > **)&jarg1; 
  result = (*arg1)->get_parent();
  *(freeling::tree< freeling::node >::iterator **)&jresult = new freeling::tree< freeling::node >::iterator((const freeling::tree< freeling::node >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeIteratorNode_1nthChildRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
  unsigned int arg2 ;
  freeling::tree< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (freeling::tree< freeling::node > *) &(*arg1)->nth_child_ref(arg2);
  *(freeling::tree< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_TreeIteratorNode_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *arg1 = (freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > **)&jarg1; 
  result = (bool)(*arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1GenericIteratorNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (freeling::generic_iterator< freeling::node > *)new freeling::generic_iterator< freeling::node >();
  *(freeling::generic_iterator< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1GenericIteratorNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::generic_iterator< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1; 
  result = (freeling::generic_iterator< freeling::node > *)new freeling::generic_iterator< freeling::node >(arg1);
  *(freeling::generic_iterator< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1GenericIteratorNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::node > *arg1 = 0 ;
  freeling::generic_iterator< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::node > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::generic_iterator< freeling::node > const & reference is null");
    return 0;
  } 
  result = (freeling::generic_iterator< freeling::node > *)new freeling::generic_iterator< freeling::node >((freeling::generic_iterator< freeling::node > const &)*arg1);
  *(freeling::generic_iterator< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorNode_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::node > **)&jarg1; 
  result = (freeling::tree< freeling::node > *) &((freeling::generic_iterator< freeling::node > const *)arg1)->operator *();
  *(freeling::tree< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorNode_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::node > **)&jarg1; 
  result = (freeling::tree< freeling::node > *)((freeling::generic_iterator< freeling::node > const *)arg1)->operator ->();
  *(freeling::tree< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1GenericIteratorNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::generic_iterator< freeling::node > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorNode_1info_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
  freeling::node *arg2 = (freeling::node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::generic_iterator< freeling::node > **)&jarg1; 
  arg2 = *(freeling::node **)&jarg2; 
  if (arg1) (*arg1)->info = *arg2;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorNode_1info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
  freeling::node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::node > **)&jarg1; 
  result = (freeling::node *)& ((*arg1)->info);
  *(freeling::node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorNode_1operator_1assignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  freeling::tree< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::generic_iterator< freeling::node > **)&jarg1; 
  arg2 = *(freeling::tree< freeling::node > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree< freeling::node > const & reference is null");
    return 0;
  } 
  result = (freeling::tree< freeling::node > *) &(*arg1)->operator =((freeling::tree< freeling::node > const &)*arg2);
  *(freeling::tree< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorNode_1numChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::node > **)&jarg1; 
  result = (unsigned int)(*arg1)->num_children();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorNode_1nthChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
  unsigned int arg2 ;
  freeling::tree< freeling::node >::sibling_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::node > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (*arg1)->nth_child(arg2);
  *(freeling::tree< freeling::node >::sibling_iterator **)&jresult = new freeling::tree< freeling::node >::sibling_iterator((const freeling::tree< freeling::node >::sibling_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorNode_1getParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::node > **)&jarg1; 
  result = (*arg1)->get_parent();
  *(freeling::tree< freeling::node >::iterator **)&jresult = new freeling::tree< freeling::node >::iterator((const freeling::tree< freeling::node >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorNode_1nthChildRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
  unsigned int arg2 ;
  freeling::tree< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::node > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (freeling::tree< freeling::node > *) &(*arg1)->nth_child_ref(arg2);
  *(freeling::tree< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorNode_1getInformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
  freeling::node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::node > **)&jarg1; 
  result = (freeling::node *) &(*arg1)->get_info();
  *(freeling::node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorNode_1appendChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::generic_iterator< freeling::node > **)&jarg1; 
  arg2 = *(freeling::tree< freeling::node > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree< freeling::node > const & reference is null");
    return ;
  } 
  (*arg1)->append_child((freeling::tree< freeling::node > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorNode_1hangChild_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::generic_iterator< freeling::node > **)&jarg1; 
  arg2 = *(freeling::tree< freeling::node > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree< freeling::node > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (*arg1)->hang_child(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorNode_1hangChild_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::generic_iterator< freeling::node > **)&jarg1; 
  arg2 = *(freeling::tree< freeling::node > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree< freeling::node > & reference is null");
    return ;
  } 
  (*arg1)->hang_child(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorNode_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::node > **)&jarg1; 
  (*arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorNode_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::node > **)&jarg1; 
  result = (bool)(*arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorNode_1siblingBegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node >::sibling_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::node > **)&jarg1; 
  result = (*arg1)->sibling_begin();
  *(freeling::tree< freeling::node >::sibling_iterator **)&jresult = new freeling::tree< freeling::node >::sibling_iterator((const freeling::tree< freeling::node >::sibling_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorNode_1siblingEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node >::sibling_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::node > **)&jarg1; 
  result = (*arg1)->sibling_end();
  *(freeling::tree< freeling::node >::sibling_iterator **)&jresult = new freeling::tree< freeling::node >::sibling_iterator((const freeling::tree< freeling::node >::sibling_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorNode_1siblingRbegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node >::sibling_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::node > **)&jarg1; 
  result = (*arg1)->sibling_rbegin();
  *(freeling::tree< freeling::node >::sibling_iterator **)&jresult = new freeling::tree< freeling::node >::sibling_iterator((const freeling::tree< freeling::node >::sibling_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorNode_1siblingRend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node >::sibling_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::node > **)&jarg1; 
  result = (*arg1)->sibling_rend();
  *(freeling::tree< freeling::node >::sibling_iterator **)&jresult = new freeling::tree< freeling::node >::sibling_iterator((const freeling::tree< freeling::node >::sibling_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorNode_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node >::preorder_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::node > **)&jarg1; 
  result = (*arg1)->begin();
  *(freeling::tree< freeling::node >::preorder_iterator **)&jresult = new freeling::tree< freeling::node >::preorder_iterator((const freeling::tree< freeling::node >::preorder_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorNode_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::node > *arg1 = (freeling::generic_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node >::preorder_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::node > **)&jarg1; 
  result = (*arg1)->end();
  *(freeling::tree< freeling::node >::preorder_iterator **)&jresult = new freeling::tree< freeling::node >::preorder_iterator((const freeling::tree< freeling::node >::preorder_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1PreorderIteratorNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  freeling::preorder_iterator< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (freeling::preorder_iterator< freeling::node > *)new freeling::preorder_iterator< freeling::node >();
  *(freeling::preorder_iterator< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1PreorderIteratorNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::preorder_iterator< freeling::node > *arg1 = 0 ;
  freeling::preorder_iterator< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::preorder_iterator< freeling::node > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::preorder_iterator< freeling::node > const & reference is null");
    return 0;
  } 
  result = (freeling::preorder_iterator< freeling::node > *)new freeling::preorder_iterator< freeling::node >((freeling::preorder_iterator< freeling::node > const &)*arg1);
  *(freeling::preorder_iterator< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1PreorderIteratorNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::preorder_iterator< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1; 
  result = (freeling::preorder_iterator< freeling::node > *)new freeling::preorder_iterator< freeling::node >(arg1);
  *(freeling::preorder_iterator< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1PreorderIteratorNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::sibling_iterator< freeling::node > *arg1 = 0 ;
  freeling::preorder_iterator< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sibling_iterator< freeling::node > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sibling_iterator< freeling::node > const & reference is null");
    return 0;
  } 
  result = (freeling::preorder_iterator< freeling::node > *)new freeling::preorder_iterator< freeling::node >((freeling::sibling_iterator< freeling::node > const &)*arg1);
  *(freeling::preorder_iterator< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1PreorderIteratorNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::preorder_iterator< freeling::node > *arg1 = (freeling::preorder_iterator< freeling::node > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::preorder_iterator< freeling::node > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_PreorderIteratorNode_1operator_1increment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::preorder_iterator< freeling::node > *arg1 = (freeling::preorder_iterator< freeling::node > *) 0 ;
  freeling::preorder_iterator< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::preorder_iterator< freeling::node > **)&jarg1; 
  result = (freeling::preorder_iterator< freeling::node > *) &(arg1)->operator ++();
  *(freeling::preorder_iterator< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_PreorderIteratorNode_1operator_1decrement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::preorder_iterator< freeling::node > *arg1 = (freeling::preorder_iterator< freeling::node > *) 0 ;
  freeling::preorder_iterator< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::preorder_iterator< freeling::node > **)&jarg1; 
  result = (freeling::preorder_iterator< freeling::node > *) &(arg1)->operator --();
  *(freeling::preorder_iterator< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_PreorderIteratorNode_1operator_1increment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  freeling::preorder_iterator< freeling::node > *arg1 = (freeling::preorder_iterator< freeling::node > *) 0 ;
  int arg2 ;
  freeling::preorder_iterator< freeling::node > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::preorder_iterator< freeling::node > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->operator ++(arg2);
  *(freeling::preorder_iterator< freeling::node > **)&jresult = new freeling::preorder_iterator< freeling::node >((const freeling::preorder_iterator< freeling::node > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_PreorderIteratorNode_1operator_1decrement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  freeling::preorder_iterator< freeling::node > *arg1 = (freeling::preorder_iterator< freeling::node > *) 0 ;
  int arg2 ;
  freeling::preorder_iterator< freeling::node > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::preorder_iterator< freeling::node > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->operator --(arg2);
  *(freeling::preorder_iterator< freeling::node > **)&jresult = new freeling::preorder_iterator< freeling::node >((const freeling::preorder_iterator< freeling::node > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1SiblingIteratorNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  freeling::sibling_iterator< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (freeling::sibling_iterator< freeling::node > *)new freeling::sibling_iterator< freeling::node >();
  *(freeling::sibling_iterator< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1SiblingIteratorNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::sibling_iterator< freeling::node > *arg1 = 0 ;
  freeling::sibling_iterator< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sibling_iterator< freeling::node > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sibling_iterator< freeling::node > const & reference is null");
    return 0;
  } 
  result = (freeling::sibling_iterator< freeling::node > *)new freeling::sibling_iterator< freeling::node >((freeling::sibling_iterator< freeling::node > const &)*arg1);
  *(freeling::sibling_iterator< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1SiblingIteratorNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::sibling_iterator< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1; 
  result = (freeling::sibling_iterator< freeling::node > *)new freeling::sibling_iterator< freeling::node >(arg1);
  *(freeling::sibling_iterator< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1SiblingIteratorNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::sibling_iterator< freeling::node > *arg1 = (freeling::sibling_iterator< freeling::node > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::sibling_iterator< freeling::node > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_SiblingIteratorNode_1operator_1increment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::sibling_iterator< freeling::node > *arg1 = (freeling::sibling_iterator< freeling::node > *) 0 ;
  freeling::sibling_iterator< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sibling_iterator< freeling::node > **)&jarg1; 
  result = (freeling::sibling_iterator< freeling::node > *) &(arg1)->operator ++();
  *(freeling::sibling_iterator< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_SiblingIteratorNode_1operator_1decrement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::sibling_iterator< freeling::node > *arg1 = (freeling::sibling_iterator< freeling::node > *) 0 ;
  freeling::sibling_iterator< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sibling_iterator< freeling::node > **)&jarg1; 
  result = (freeling::sibling_iterator< freeling::node > *) &(arg1)->operator --();
  *(freeling::sibling_iterator< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_SiblingIteratorNode_1operator_1increment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  freeling::sibling_iterator< freeling::node > *arg1 = (freeling::sibling_iterator< freeling::node > *) 0 ;
  int arg2 ;
  freeling::sibling_iterator< freeling::node > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sibling_iterator< freeling::node > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->operator ++(arg2);
  *(freeling::sibling_iterator< freeling::node > **)&jresult = new freeling::sibling_iterator< freeling::node >((const freeling::sibling_iterator< freeling::node > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_SiblingIteratorNode_1operator_1decrement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  freeling::sibling_iterator< freeling::node > *arg1 = (freeling::sibling_iterator< freeling::node > *) 0 ;
  int arg2 ;
  freeling::sibling_iterator< freeling::node > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sibling_iterator< freeling::node > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->operator --(arg2);
  *(freeling::sibling_iterator< freeling::node > **)&jresult = new freeling::sibling_iterator< freeling::node >((const freeling::sibling_iterator< freeling::node > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1TreeIteratorDepnode_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *)new freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > >();
  *(freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1TreeIteratorDepnode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1; 
  result = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *)new freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > >(arg1);
  *(freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1TreeIteratorDepnode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = 0 ;
  freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const & reference is null");
    return 0;
  } 
  result = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *)new freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > >((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const &)*arg1);
  *(freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1TreeIteratorDepnode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeIteratorDepnode_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
  freeling::tree< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > **)&jarg1; 
  result = (freeling::tree< freeling::depnode > *) &((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const *)arg1)->operator *();
  *(freeling::tree< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeIteratorDepnode_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
  freeling::tree< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > **)&jarg1; 
  result = (freeling::tree< freeling::depnode > *)((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const *)arg1)->operator ->();
  *(freeling::tree< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_TreeIteratorDepnode_1operator_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
  freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > **)&jarg1; 
  arg2 = *(freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const & reference is null");
    return 0;
  } 
  result = (bool)((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const *)arg1)->operator ==((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_TreeIteratorDepnode_1operator_1notequal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
  freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > **)&jarg1; 
  arg2 = *(freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const & reference is null");
    return 0;
  } 
  result = (bool)((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const *)arg1)->operator !=((freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeIteratorDepnode_1info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
  freeling::depnode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > **)&jarg1; 
  result = (freeling::depnode *)& ((*arg1)->info);
  *(freeling::depnode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeIteratorDepnode_1numChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > **)&jarg1; 
  result = (unsigned int)(*arg1)->num_children();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeIteratorDepnode_1nthChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
  unsigned int arg2 ;
  freeling::tree< freeling::depnode >::sibling_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (*arg1)->nth_child(arg2);
  *(freeling::tree< freeling::depnode >::sibling_iterator **)&jresult = new freeling::tree< freeling::depnode >::sibling_iterator((const freeling::tree< freeling::depnode >::sibling_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeIteratorDepnode_1getParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
  freeling::tree< freeling::depnode >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > **)&jarg1; 
  result = (*arg1)->get_parent();
  *(freeling::tree< freeling::depnode >::iterator **)&jresult = new freeling::tree< freeling::depnode >::iterator((const freeling::tree< freeling::depnode >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeIteratorDepnode_1nthChildRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
  unsigned int arg2 ;
  freeling::tree< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (freeling::tree< freeling::depnode > *) &(*arg1)->nth_child_ref(arg2);
  *(freeling::tree< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_TreeIteratorDepnode_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *arg1 = (freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > **)&jarg1; 
  result = (bool)(*arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1GenericIteratorDepnode_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (freeling::generic_iterator< freeling::depnode > *)new freeling::generic_iterator< freeling::depnode >();
  *(freeling::generic_iterator< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1GenericIteratorDepnode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::generic_iterator< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1; 
  result = (freeling::generic_iterator< freeling::depnode > *)new freeling::generic_iterator< freeling::depnode >(arg1);
  *(freeling::generic_iterator< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1GenericIteratorDepnode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::depnode > *arg1 = 0 ;
  freeling::generic_iterator< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::depnode > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::generic_iterator< freeling::depnode > const & reference is null");
    return 0;
  } 
  result = (freeling::generic_iterator< freeling::depnode > *)new freeling::generic_iterator< freeling::depnode >((freeling::generic_iterator< freeling::depnode > const &)*arg1);
  *(freeling::generic_iterator< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorDepnode_1_1_1ref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::depnode > **)&jarg1; 
  result = (freeling::tree< freeling::depnode > *) &((freeling::generic_iterator< freeling::depnode > const *)arg1)->operator *();
  *(freeling::tree< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorDepnode_1_1_1deref_1_1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::depnode > **)&jarg1; 
  result = (freeling::tree< freeling::depnode > *)((freeling::generic_iterator< freeling::depnode > const *)arg1)->operator ->();
  *(freeling::tree< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1GenericIteratorDepnode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::generic_iterator< freeling::depnode > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorDepnode_1info_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
  freeling::depnode *arg2 = (freeling::depnode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::generic_iterator< freeling::depnode > **)&jarg1; 
  arg2 = *(freeling::depnode **)&jarg2; 
  if (arg1) (*arg1)->info = *arg2;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorDepnode_1info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
  freeling::depnode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::depnode > **)&jarg1; 
  result = (freeling::depnode *)& ((*arg1)->info);
  *(freeling::depnode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorDepnode_1operator_1assignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  freeling::tree< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::generic_iterator< freeling::depnode > **)&jarg1; 
  arg2 = *(freeling::tree< freeling::depnode > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree< freeling::depnode > const & reference is null");
    return 0;
  } 
  result = (freeling::tree< freeling::depnode > *) &(*arg1)->operator =((freeling::tree< freeling::depnode > const &)*arg2);
  *(freeling::tree< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorDepnode_1numChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::depnode > **)&jarg1; 
  result = (unsigned int)(*arg1)->num_children();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorDepnode_1nthChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
  unsigned int arg2 ;
  freeling::tree< freeling::depnode >::sibling_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::depnode > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (*arg1)->nth_child(arg2);
  *(freeling::tree< freeling::depnode >::sibling_iterator **)&jresult = new freeling::tree< freeling::depnode >::sibling_iterator((const freeling::tree< freeling::depnode >::sibling_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorDepnode_1getParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::depnode > **)&jarg1; 
  result = (*arg1)->get_parent();
  *(freeling::tree< freeling::depnode >::iterator **)&jresult = new freeling::tree< freeling::depnode >::iterator((const freeling::tree< freeling::depnode >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorDepnode_1nthChildRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
  unsigned int arg2 ;
  freeling::tree< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::depnode > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (freeling::tree< freeling::depnode > *) &(*arg1)->nth_child_ref(arg2);
  *(freeling::tree< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorDepnode_1getInformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
  freeling::depnode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::depnode > **)&jarg1; 
  result = (freeling::depnode *) &(*arg1)->get_info();
  *(freeling::depnode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorDepnode_1appendChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::generic_iterator< freeling::depnode > **)&jarg1; 
  arg2 = *(freeling::tree< freeling::depnode > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree< freeling::depnode > const & reference is null");
    return ;
  } 
  (*arg1)->append_child((freeling::tree< freeling::depnode > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorDepnode_1hangChild_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::generic_iterator< freeling::depnode > **)&jarg1; 
  arg2 = *(freeling::tree< freeling::depnode > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree< freeling::depnode > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (*arg1)->hang_child(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorDepnode_1hangChild_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::generic_iterator< freeling::depnode > **)&jarg1; 
  arg2 = *(freeling::tree< freeling::depnode > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree< freeling::depnode > & reference is null");
    return ;
  } 
  (*arg1)->hang_child(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorDepnode_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::depnode > **)&jarg1; 
  (*arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorDepnode_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::depnode > **)&jarg1; 
  result = (bool)(*arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorDepnode_1siblingBegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode >::sibling_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::depnode > **)&jarg1; 
  result = (*arg1)->sibling_begin();
  *(freeling::tree< freeling::depnode >::sibling_iterator **)&jresult = new freeling::tree< freeling::depnode >::sibling_iterator((const freeling::tree< freeling::depnode >::sibling_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorDepnode_1siblingEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode >::sibling_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::depnode > **)&jarg1; 
  result = (*arg1)->sibling_end();
  *(freeling::tree< freeling::depnode >::sibling_iterator **)&jresult = new freeling::tree< freeling::depnode >::sibling_iterator((const freeling::tree< freeling::depnode >::sibling_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorDepnode_1siblingRbegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode >::sibling_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::depnode > **)&jarg1; 
  result = (*arg1)->sibling_rbegin();
  *(freeling::tree< freeling::depnode >::sibling_iterator **)&jresult = new freeling::tree< freeling::depnode >::sibling_iterator((const freeling::tree< freeling::depnode >::sibling_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorDepnode_1siblingRend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode >::sibling_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::depnode > **)&jarg1; 
  result = (*arg1)->sibling_rend();
  *(freeling::tree< freeling::depnode >::sibling_iterator **)&jresult = new freeling::tree< freeling::depnode >::sibling_iterator((const freeling::tree< freeling::depnode >::sibling_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorDepnode_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode >::preorder_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::depnode > **)&jarg1; 
  result = (*arg1)->begin();
  *(freeling::tree< freeling::depnode >::preorder_iterator **)&jresult = new freeling::tree< freeling::depnode >::preorder_iterator((const freeling::tree< freeling::depnode >::preorder_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorDepnode_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::generic_iterator< freeling::depnode > *arg1 = (freeling::generic_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode >::preorder_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::generic_iterator< freeling::depnode > **)&jarg1; 
  result = (*arg1)->end();
  *(freeling::tree< freeling::depnode >::preorder_iterator **)&jresult = new freeling::tree< freeling::depnode >::preorder_iterator((const freeling::tree< freeling::depnode >::preorder_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1PreorderIteratorDepnode_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  freeling::preorder_iterator< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (freeling::preorder_iterator< freeling::depnode > *)new freeling::preorder_iterator< freeling::depnode >();
  *(freeling::preorder_iterator< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1PreorderIteratorDepnode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::preorder_iterator< freeling::depnode > *arg1 = 0 ;
  freeling::preorder_iterator< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::preorder_iterator< freeling::depnode > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::preorder_iterator< freeling::depnode > const & reference is null");
    return 0;
  } 
  result = (freeling::preorder_iterator< freeling::depnode > *)new freeling::preorder_iterator< freeling::depnode >((freeling::preorder_iterator< freeling::depnode > const &)*arg1);
  *(freeling::preorder_iterator< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1PreorderIteratorDepnode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::preorder_iterator< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1; 
  result = (freeling::preorder_iterator< freeling::depnode > *)new freeling::preorder_iterator< freeling::depnode >(arg1);
  *(freeling::preorder_iterator< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1PreorderIteratorDepnode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::sibling_iterator< freeling::depnode > *arg1 = 0 ;
  freeling::preorder_iterator< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sibling_iterator< freeling::depnode > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sibling_iterator< freeling::depnode > const & reference is null");
    return 0;
  } 
  result = (freeling::preorder_iterator< freeling::depnode > *)new freeling::preorder_iterator< freeling::depnode >((freeling::sibling_iterator< freeling::depnode > const &)*arg1);
  *(freeling::preorder_iterator< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1PreorderIteratorDepnode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::preorder_iterator< freeling::depnode > *arg1 = (freeling::preorder_iterator< freeling::depnode > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::preorder_iterator< freeling::depnode > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_PreorderIteratorDepnode_1operator_1increment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::preorder_iterator< freeling::depnode > *arg1 = (freeling::preorder_iterator< freeling::depnode > *) 0 ;
  freeling::preorder_iterator< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::preorder_iterator< freeling::depnode > **)&jarg1; 
  result = (freeling::preorder_iterator< freeling::depnode > *) &(arg1)->operator ++();
  *(freeling::preorder_iterator< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_PreorderIteratorDepnode_1operator_1decrement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::preorder_iterator< freeling::depnode > *arg1 = (freeling::preorder_iterator< freeling::depnode > *) 0 ;
  freeling::preorder_iterator< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::preorder_iterator< freeling::depnode > **)&jarg1; 
  result = (freeling::preorder_iterator< freeling::depnode > *) &(arg1)->operator --();
  *(freeling::preorder_iterator< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_PreorderIteratorDepnode_1operator_1increment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  freeling::preorder_iterator< freeling::depnode > *arg1 = (freeling::preorder_iterator< freeling::depnode > *) 0 ;
  int arg2 ;
  freeling::preorder_iterator< freeling::depnode > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::preorder_iterator< freeling::depnode > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->operator ++(arg2);
  *(freeling::preorder_iterator< freeling::depnode > **)&jresult = new freeling::preorder_iterator< freeling::depnode >((const freeling::preorder_iterator< freeling::depnode > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_PreorderIteratorDepnode_1operator_1decrement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  freeling::preorder_iterator< freeling::depnode > *arg1 = (freeling::preorder_iterator< freeling::depnode > *) 0 ;
  int arg2 ;
  freeling::preorder_iterator< freeling::depnode > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::preorder_iterator< freeling::depnode > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->operator --(arg2);
  *(freeling::preorder_iterator< freeling::depnode > **)&jresult = new freeling::preorder_iterator< freeling::depnode >((const freeling::preorder_iterator< freeling::depnode > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1SiblingIteratorDepnode_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  freeling::sibling_iterator< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (freeling::sibling_iterator< freeling::depnode > *)new freeling::sibling_iterator< freeling::depnode >();
  *(freeling::sibling_iterator< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1SiblingIteratorDepnode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::sibling_iterator< freeling::depnode > *arg1 = 0 ;
  freeling::sibling_iterator< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sibling_iterator< freeling::depnode > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sibling_iterator< freeling::depnode > const & reference is null");
    return 0;
  } 
  result = (freeling::sibling_iterator< freeling::depnode > *)new freeling::sibling_iterator< freeling::depnode >((freeling::sibling_iterator< freeling::depnode > const &)*arg1);
  *(freeling::sibling_iterator< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1SiblingIteratorDepnode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::sibling_iterator< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1; 
  result = (freeling::sibling_iterator< freeling::depnode > *)new freeling::sibling_iterator< freeling::depnode >(arg1);
  *(freeling::sibling_iterator< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1SiblingIteratorDepnode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::sibling_iterator< freeling::depnode > *arg1 = (freeling::sibling_iterator< freeling::depnode > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::sibling_iterator< freeling::depnode > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_SiblingIteratorDepnode_1operator_1increment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::sibling_iterator< freeling::depnode > *arg1 = (freeling::sibling_iterator< freeling::depnode > *) 0 ;
  freeling::sibling_iterator< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sibling_iterator< freeling::depnode > **)&jarg1; 
  result = (freeling::sibling_iterator< freeling::depnode > *) &(arg1)->operator ++();
  *(freeling::sibling_iterator< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_SiblingIteratorDepnode_1operator_1decrement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::sibling_iterator< freeling::depnode > *arg1 = (freeling::sibling_iterator< freeling::depnode > *) 0 ;
  freeling::sibling_iterator< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sibling_iterator< freeling::depnode > **)&jarg1; 
  result = (freeling::sibling_iterator< freeling::depnode > *) &(arg1)->operator --();
  *(freeling::sibling_iterator< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_SiblingIteratorDepnode_1operator_1increment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  freeling::sibling_iterator< freeling::depnode > *arg1 = (freeling::sibling_iterator< freeling::depnode > *) 0 ;
  int arg2 ;
  freeling::sibling_iterator< freeling::depnode > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sibling_iterator< freeling::depnode > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->operator ++(arg2);
  *(freeling::sibling_iterator< freeling::depnode > **)&jresult = new freeling::sibling_iterator< freeling::depnode >((const freeling::sibling_iterator< freeling::depnode > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_SiblingIteratorDepnode_1operator_1decrement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  freeling::sibling_iterator< freeling::depnode > *arg1 = (freeling::sibling_iterator< freeling::depnode > *) 0 ;
  int arg2 ;
  freeling::sibling_iterator< freeling::depnode > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sibling_iterator< freeling::depnode > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->operator --(arg2);
  *(freeling::sibling_iterator< freeling::depnode > **)&jresult = new freeling::sibling_iterator< freeling::depnode >((const freeling::sibling_iterator< freeling::depnode > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_TreeNode_1info_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::node *arg2 = (freeling::node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1; 
  arg2 = *(freeling::node **)&jarg2; 
  if (arg1) (arg1)->info = *arg2;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeNode_1info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1; 
  result = (freeling::node *)& ((arg1)->info);
  *(freeling::node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1TreeNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  freeling::tree< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (freeling::tree< freeling::node > *)new freeling::tree< freeling::node >();
  *(freeling::tree< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1TreeNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::node *arg1 = 0 ;
  freeling::tree< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::node **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::node const & reference is null");
    return 0;
  } 
  result = (freeling::tree< freeling::node > *)new freeling::tree< freeling::node >((freeling::node const &)*arg1);
  *(freeling::tree< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1TreeNode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::node > *arg1 = 0 ;
  freeling::tree< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree< freeling::node > const & reference is null");
    return 0;
  } 
  result = (freeling::tree< freeling::node > *)new freeling::tree< freeling::node >((freeling::tree< freeling::node > const &)*arg1);
  *(freeling::tree< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1TreeNode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::node >::preorder_iterator *arg1 = 0 ;
  freeling::tree< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::node >::preorder_iterator **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree< freeling::node >::preorder_iterator const & reference is null");
    return 0;
  } 
  result = (freeling::tree< freeling::node > *)new freeling::tree< freeling::node >((freeling::tree< freeling::node >::preorder_iterator const &)*arg1);
  *(freeling::tree< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1TreeNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeNode_1operator_1assignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  freeling::tree< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1; 
  arg2 = *(freeling::tree< freeling::node > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree< freeling::node > const & reference is null");
    return 0;
  } 
  result = (freeling::tree< freeling::node > *) &(arg1)->operator =((freeling::tree< freeling::node > const &)*arg2);
  *(freeling::tree< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeNode_1numChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1; 
  result = (unsigned int)((freeling::tree< freeling::node > const *)arg1)->num_children();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeNode_1nthChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  unsigned int arg2 ;
  freeling::tree< freeling::node >::sibling_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = ((freeling::tree< freeling::node > const *)arg1)->nth_child(arg2);
  *(freeling::tree< freeling::node >::sibling_iterator **)&jresult = new freeling::tree< freeling::node >::sibling_iterator((const freeling::tree< freeling::node >::sibling_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeNode_1getParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::tree< freeling::node >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1; 
  result = ((freeling::tree< freeling::node > const *)arg1)->get_parent();
  *(freeling::tree< freeling::node >::iterator **)&jresult = new freeling::tree< freeling::node >::iterator((const freeling::tree< freeling::node >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeNode_1nthChildRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  unsigned int arg2 ;
  freeling::tree< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (freeling::tree< freeling::node > *) &((freeling::tree< freeling::node > const *)arg1)->nth_child_ref(arg2);
  *(freeling::tree< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeNode_1getInformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1; 
  result = (freeling::node *) &(arg1)->get_info();
  *(freeling::node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_TreeNode_1appendChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1; 
  arg2 = *(freeling::tree< freeling::node > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree< freeling::node > const & reference is null");
    return ;
  } 
  (arg1)->append_child((freeling::tree< freeling::node > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_TreeNode_1hangChild_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1; 
  arg2 = *(freeling::tree< freeling::node > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree< freeling::node > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->hang_child(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_TreeNode_1hangChild_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1; 
  arg2 = *(freeling::tree< freeling::node > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree< freeling::node > & reference is null");
    return ;
  } 
  (arg1)->hang_child(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_TreeNode_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_TreeNode_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1; 
  result = (bool)((freeling::tree< freeling::node > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeNode_1siblingBegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::tree< freeling::node >::sibling_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1; 
  result = (arg1)->sibling_begin();
  *(freeling::tree< freeling::node >::sibling_iterator **)&jresult = new freeling::tree< freeling::node >::sibling_iterator((const freeling::tree< freeling::node >::sibling_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeNode_1siblingEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::tree< freeling::node >::sibling_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1; 
  result = (arg1)->sibling_end();
  *(freeling::tree< freeling::node >::sibling_iterator **)&jresult = new freeling::tree< freeling::node >::sibling_iterator((const freeling::tree< freeling::node >::sibling_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeNode_1siblingRbegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::tree< freeling::node >::sibling_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1; 
  result = (arg1)->sibling_rbegin();
  *(freeling::tree< freeling::node >::sibling_iterator **)&jresult = new freeling::tree< freeling::node >::sibling_iterator((const freeling::tree< freeling::node >::sibling_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeNode_1siblingRend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::tree< freeling::node >::sibling_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1; 
  result = (arg1)->sibling_rend();
  *(freeling::tree< freeling::node >::sibling_iterator **)&jresult = new freeling::tree< freeling::node >::sibling_iterator((const freeling::tree< freeling::node >::sibling_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeNode_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::tree< freeling::node >::preorder_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1; 
  result = (arg1)->begin();
  *(freeling::tree< freeling::node >::preorder_iterator **)&jresult = new freeling::tree< freeling::node >::preorder_iterator((const freeling::tree< freeling::node >::preorder_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeNode_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::tree< freeling::node >::preorder_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::node > **)&jarg1; 
  result = (arg1)->end();
  *(freeling::tree< freeling::node >::preorder_iterator **)&jresult = new freeling::tree< freeling::node >::preorder_iterator((const freeling::tree< freeling::node >::preorder_iterator &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_TreeDepnode_1info_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::depnode *arg2 = (freeling::depnode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1; 
  arg2 = *(freeling::depnode **)&jarg2; 
  if (arg1) (arg1)->info = *arg2;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeDepnode_1info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::depnode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1; 
  result = (freeling::depnode *)& ((arg1)->info);
  *(freeling::depnode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1TreeDepnode_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  freeling::tree< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (freeling::tree< freeling::depnode > *)new freeling::tree< freeling::depnode >();
  *(freeling::tree< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1TreeDepnode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::depnode *arg1 = 0 ;
  freeling::tree< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::depnode **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::depnode const & reference is null");
    return 0;
  } 
  result = (freeling::tree< freeling::depnode > *)new freeling::tree< freeling::depnode >((freeling::depnode const &)*arg1);
  *(freeling::tree< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1TreeDepnode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::depnode > *arg1 = 0 ;
  freeling::tree< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree< freeling::depnode > const & reference is null");
    return 0;
  } 
  result = (freeling::tree< freeling::depnode > *)new freeling::tree< freeling::depnode >((freeling::tree< freeling::depnode > const &)*arg1);
  *(freeling::tree< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1TreeDepnode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::depnode >::preorder_iterator *arg1 = 0 ;
  freeling::tree< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::depnode >::preorder_iterator **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree< freeling::depnode >::preorder_iterator const & reference is null");
    return 0;
  } 
  result = (freeling::tree< freeling::depnode > *)new freeling::tree< freeling::depnode >((freeling::tree< freeling::depnode >::preorder_iterator const &)*arg1);
  *(freeling::tree< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1TreeDepnode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeDepnode_1operator_1assignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  freeling::tree< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1; 
  arg2 = *(freeling::tree< freeling::depnode > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree< freeling::depnode > const & reference is null");
    return 0;
  } 
  result = (freeling::tree< freeling::depnode > *) &(arg1)->operator =((freeling::tree< freeling::depnode > const &)*arg2);
  *(freeling::tree< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeDepnode_1numChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1; 
  result = (unsigned int)((freeling::tree< freeling::depnode > const *)arg1)->num_children();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeDepnode_1nthChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  unsigned int arg2 ;
  freeling::tree< freeling::depnode >::sibling_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = ((freeling::tree< freeling::depnode > const *)arg1)->nth_child(arg2);
  *(freeling::tree< freeling::depnode >::sibling_iterator **)&jresult = new freeling::tree< freeling::depnode >::sibling_iterator((const freeling::tree< freeling::depnode >::sibling_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeDepnode_1getParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1; 
  result = ((freeling::tree< freeling::depnode > const *)arg1)->get_parent();
  *(freeling::tree< freeling::depnode >::iterator **)&jresult = new freeling::tree< freeling::depnode >::iterator((const freeling::tree< freeling::depnode >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeDepnode_1nthChildRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  unsigned int arg2 ;
  freeling::tree< freeling::depnode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (freeling::tree< freeling::depnode > *) &((freeling::tree< freeling::depnode > const *)arg1)->nth_child_ref(arg2);
  *(freeling::tree< freeling::depnode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeDepnode_1getInformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::depnode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1; 
  result = (freeling::depnode *) &(arg1)->get_info();
  *(freeling::depnode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_TreeDepnode_1appendChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1; 
  arg2 = *(freeling::tree< freeling::depnode > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree< freeling::depnode > const & reference is null");
    return ;
  } 
  (arg1)->append_child((freeling::tree< freeling::depnode > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_TreeDepnode_1hangChild_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1; 
  arg2 = *(freeling::tree< freeling::depnode > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree< freeling::depnode > & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->hang_child(*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_TreeDepnode_1hangChild_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1; 
  arg2 = *(freeling::tree< freeling::depnode > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::tree< freeling::depnode > & reference is null");
    return ;
  } 
  (arg1)->hang_child(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_TreeDepnode_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_TreeDepnode_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1; 
  result = (bool)((freeling::tree< freeling::depnode > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeDepnode_1siblingBegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode >::sibling_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1; 
  result = (arg1)->sibling_begin();
  *(freeling::tree< freeling::depnode >::sibling_iterator **)&jresult = new freeling::tree< freeling::depnode >::sibling_iterator((const freeling::tree< freeling::depnode >::sibling_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeDepnode_1siblingEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode >::sibling_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1; 
  result = (arg1)->sibling_end();
  *(freeling::tree< freeling::depnode >::sibling_iterator **)&jresult = new freeling::tree< freeling::depnode >::sibling_iterator((const freeling::tree< freeling::depnode >::sibling_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeDepnode_1siblingRbegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode >::sibling_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1; 
  result = (arg1)->sibling_rbegin();
  *(freeling::tree< freeling::depnode >::sibling_iterator **)&jresult = new freeling::tree< freeling::depnode >::sibling_iterator((const freeling::tree< freeling::depnode >::sibling_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeDepnode_1siblingRend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode >::sibling_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1; 
  result = (arg1)->sibling_rend();
  *(freeling::tree< freeling::depnode >::sibling_iterator **)&jresult = new freeling::tree< freeling::depnode >::sibling_iterator((const freeling::tree< freeling::depnode >::sibling_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeDepnode_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode >::preorder_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1; 
  result = (arg1)->begin();
  *(freeling::tree< freeling::depnode >::preorder_iterator **)&jresult = new freeling::tree< freeling::depnode >::preorder_iterator((const freeling::tree< freeling::depnode >::preorder_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_TreeDepnode_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode >::preorder_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tree< freeling::depnode > **)&jarg1; 
  result = (arg1)->end();
  *(freeling::tree< freeling::depnode >::preorder_iterator **)&jresult = new freeling::tree< freeling::depnode >::preorder_iterator((const freeling::tree< freeling::depnode >::preorder_iterator &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1user_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  std::vector< std::wstring > *arg2 = (std::vector< std::wstring > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::analysis **)&jarg1; 
  arg2 = *(std::vector< std::wstring > **)&jarg2; 
  if (arg1) (arg1)->user = *arg2;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1user_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  std::vector< std::wstring > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::analysis **)&jarg1; 
  result = (std::vector< std::wstring > *)& ((arg1)->user);
  *(std::vector< std::wstring > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Analysis_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  freeling::analysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (freeling::analysis *)new freeling::analysis();
  *(freeling::analysis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Analysis_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  freeling::analysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (freeling::analysis *)new freeling::analysis((std::wstring const &)*arg1,(std::wstring const &)*arg2);
  *(freeling::analysis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1operator_1assignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  freeling::analysis *arg2 = 0 ;
  freeling::analysis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::analysis **)&jarg1; 
  arg2 = *(freeling::analysis **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::analysis const & reference is null");
    return 0;
  } 
  result = (freeling::analysis *) &(arg1)->operator =((freeling::analysis const &)*arg2);
  *(freeling::analysis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Analysis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::analysis **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::analysis **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  (arg1)->init((std::wstring const &)*arg2,(std::wstring const &)*arg3);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1setLemma(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::analysis **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->set_lemma((std::wstring const &)*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1setTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::analysis **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->set_tag((std::wstring const &)*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1setProb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::analysis **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_prob(arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1setDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::analysis **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_distance(arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1setRetokenizable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  std::list< freeling::word > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::analysis **)&jarg1; 
  arg2 = *(std::list< freeling::word > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::word > const & reference is null");
    return ;
  } 
  (arg1)->set_retokenizable((std::list< freeling::word > const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1hasProb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::analysis **)&jarg1; 
  result = (bool)((freeling::analysis const *)arg1)->has_prob();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1hasDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::analysis **)&jarg1; 
  result = (bool)((freeling::analysis const *)arg1)->has_distance();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1getLemma(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::analysis **)&jarg1; 
  result = ((freeling::analysis const *)arg1)->get_lemma();
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1getTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::analysis **)&jarg1; 
  result = ((freeling::analysis const *)arg1)->get_tag();
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1getProb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::analysis **)&jarg1; 
  result = (double)((freeling::analysis const *)arg1)->get_prob();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1getDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::analysis **)&jarg1; 
  result = (double)((freeling::analysis const *)arg1)->get_distance();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1isRetokenizable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::analysis **)&jarg1; 
  result = (bool)((freeling::analysis const *)arg1)->is_retokenizable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1getRetokenizable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  std::list< freeling::word > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::analysis **)&jarg1; 
  result = ((freeling::analysis const *)arg1)->get_retokenizable();
  *(std::list< freeling::word > **)&jresult = new std::list< freeling::word >((const std::list< freeling::word > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1getSenses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  SwigValueWrapper< std::list< std::pair< std::wstring,double > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::analysis **)&jarg1; 
  result = ((freeling::analysis const *)arg1)->get_senses();
  *(std::list< std::pair< std::wstring,double > > **)&jresult = new std::list< std::pair< std::wstring,double > >((const std::list< std::pair< std::wstring,double > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1setSenses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  std::list< std::pair< std::wstring,double > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::analysis **)&jarg1; 
  arg2 = *(std::list< std::pair< std::wstring,double > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::pair< std::wstring,double > > const & reference is null");
    return ;
  } 
  (arg1)->set_senses((std::list< std::pair< std::wstring,double > > const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1getSensesString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::analysis **)&jarg1; 
  result = ((freeling::analysis const *)arg1)->get_senses_string();
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1operator_1morethan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  freeling::analysis *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::analysis **)&jarg1; 
  arg2 = *(freeling::analysis **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::analysis const & reference is null");
    return 0;
  } 
  result = (bool)((freeling::analysis const *)arg1)->operator >((freeling::analysis const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1operator_1lessthan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  freeling::analysis *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::analysis **)&jarg1; 
  arg2 = *(freeling::analysis **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::analysis const & reference is null");
    return 0;
  } 
  result = (bool)((freeling::analysis const *)arg1)->operator <((freeling::analysis const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1operator_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  freeling::analysis *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::analysis **)&jarg1; 
  arg2 = *(freeling::analysis **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::analysis const & reference is null");
    return 0;
  } 
  result = (bool)((freeling::analysis const *)arg1)->operator ==((freeling::analysis const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1isSelected_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::analysis **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((freeling::analysis const *)arg1)->is_selected(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1isSelected_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::analysis **)&jarg1; 
  result = (bool)((freeling::analysis const *)arg1)->is_selected();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1markSelected_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::analysis **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->mark_selected(arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1markSelected_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::analysis **)&jarg1; 
  (arg1)->mark_selected();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1unmarkSelected_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::analysis **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->unmark_selected(arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Analysis_1unmarkSelected_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::analysis **)&jarg1; 
  (arg1)->unmark_selected();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1user_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::vector< std::wstring > *arg2 = (std::vector< std::wstring > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::word **)&jarg1; 
  arg2 = *(std::vector< std::wstring > **)&jarg2; 
  if (arg1) (arg1)->user = *arg2;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Word_1user_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::vector< std::wstring > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = (std::vector< std::wstring > *)& ((arg1)->user);
  *(std::vector< std::wstring > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Word_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  freeling::word *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (freeling::word *)new freeling::word();
  *(freeling::word **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Word_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  freeling::word *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (freeling::word *)new freeling::word((std::wstring const &)*arg1);
  *(freeling::word **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Word_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  std::list< freeling::word > *arg2 = 0 ;
  freeling::word *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  arg2 = *(std::list< freeling::word > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::word > const & reference is null");
    return 0;
  } 
  result = (freeling::word *)new freeling::word((std::wstring const &)*arg1,(std::list< freeling::word > const &)*arg2);
  *(freeling::word **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Word_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  std::list< freeling::analysis > *arg2 = 0 ;
  std::list< freeling::word > *arg3 = 0 ;
  freeling::word *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  arg2 = *(std::list< freeling::analysis > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::analysis > const & reference is null");
    return 0;
  } 
  arg3 = *(std::list< freeling::word > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::word > const & reference is null");
    return 0;
  } 
  result = (freeling::word *)new freeling::word((std::wstring const &)*arg1,(std::list< freeling::analysis > const &)*arg2,(std::list< freeling::word > const &)*arg3);
  *(freeling::word **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Word_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::word *arg1 = 0 ;
  freeling::word *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::word const & reference is null");
    return 0;
  } 
  result = (freeling::word *)new freeling::word((freeling::word const &)*arg1);
  *(freeling::word **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Word_1operator_1assignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  freeling::word *arg2 = 0 ;
  freeling::word *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::word **)&jarg1; 
  arg2 = *(freeling::word **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::word const & reference is null");
    return 0;
  } 
  result = (freeling::word *) &(arg1)->operator =((freeling::word const &)*arg2);
  *(freeling::word **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Word(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::word **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1copyAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  freeling::word *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::word **)&jarg1; 
  arg2 = *(freeling::word **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::word const & reference is null");
    return ;
  } 
  (arg1)->copy_analysis((freeling::word const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_edu_upc_freeling_freelingJNI_Word_1getNSelected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = (int)((freeling::word const *)arg1)->get_n_selected();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_edu_upc_freeling_freelingJNI_Word_1getNUnselected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = (int)((freeling::word const *)arg1)->get_n_unselected();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_Word_1isMultiword(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = (bool)((freeling::word const *)arg1)->is_multiword();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_Word_1isAmbiguousMw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = (bool)((freeling::word const *)arg1)->is_ambiguous_mw();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1setAmbiguousMw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_ambiguous_mw(arg2);
}


SWIGEXPORT jint JNICALL Java_edu_upc_freeling_freelingJNI_Word_1getNWordsMw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = (int)((freeling::word const *)arg1)->get_n_words_mw();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Word_1getWordsMw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::list< freeling::word > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = (std::list< freeling::word > *) &((freeling::word const *)arg1)->get_words_mw();
  *(std::list< freeling::word > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Word_1getForm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = ((freeling::word const *)arg1)->get_form();
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Word_1getLcForm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = ((freeling::word const *)arg1)->get_lc_form();
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Word_1getPhForm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = ((freeling::word const *)arg1)->get_ph_form();
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Word_1selectedBegin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int arg2 ;
  freeling::word::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->selected_begin(arg2);
  *(freeling::word::iterator **)&jresult = new freeling::word::iterator((const freeling::word::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Word_1selectedBegin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  freeling::word::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = (arg1)->selected_begin();
  *(freeling::word::iterator **)&jresult = new freeling::word::iterator((const freeling::word::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Word_1selectedEnd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int arg2 ;
  freeling::word::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->selected_end(arg2);
  *(freeling::word::iterator **)&jresult = new freeling::word::iterator((const freeling::word::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Word_1selectedEnd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  freeling::word::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = (arg1)->selected_end();
  *(freeling::word::iterator **)&jresult = new freeling::word::iterator((const freeling::word::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Word_1unselectedBegin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int arg2 ;
  freeling::word::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->unselected_begin(arg2);
  *(freeling::word::iterator **)&jresult = new freeling::word::iterator((const freeling::word::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Word_1unselectedBegin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  freeling::word::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = (arg1)->unselected_begin();
  *(freeling::word::iterator **)&jresult = new freeling::word::iterator((const freeling::word::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Word_1unselectedEnd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int arg2 ;
  freeling::word::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->unselected_end(arg2);
  *(freeling::word::iterator **)&jresult = new freeling::word::iterator((const freeling::word::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Word_1unselectedEnd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  freeling::word::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = (arg1)->unselected_end();
  *(freeling::word::iterator **)&jresult = new freeling::word::iterator((const freeling::word::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Word_1numKbest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = (unsigned int)((freeling::word const *)arg1)->num_kbest();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Word_1getLemma_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int arg2 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((freeling::word const *)arg1)->get_lemma(arg2);
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Word_1getLemma_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = ((freeling::word const *)arg1)->get_lemma();
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Word_1getTag_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int arg2 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((freeling::word const *)arg1)->get_tag(arg2);
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Word_1getTag_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = ((freeling::word const *)arg1)->get_tag();
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Word_1getSenses_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::list< std::pair< std::wstring,double > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((freeling::word const *)arg1)->get_senses(arg2);
  *(std::list< std::pair< std::wstring,double > > **)&jresult = new std::list< std::pair< std::wstring,double > >((const std::list< std::pair< std::wstring,double > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Word_1getSenses_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  SwigValueWrapper< std::list< std::pair< std::wstring,double > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = ((freeling::word const *)arg1)->get_senses();
  *(std::list< std::pair< std::wstring,double > > **)&jresult = new std::list< std::pair< std::wstring,double > >((const std::list< std::pair< std::wstring,double > > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Word_1getSensesString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int arg2 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((freeling::word const *)arg1)->get_senses_string(arg2);
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Word_1getSensesString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = ((freeling::word const *)arg1)->get_senses_string();
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1setSenses_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::list< std::pair< std::wstring,double > > *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  arg2 = *(std::list< std::pair< std::wstring,double > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::pair< std::wstring,double > > const & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->set_senses((std::list< std::pair< std::wstring,double > > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1setSenses_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::list< std::pair< std::wstring,double > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  arg2 = *(std::list< std::pair< std::wstring,double > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::pair< std::wstring,double > > const & reference is null");
    return ;
  } 
  (arg1)->set_senses((std::list< std::pair< std::wstring,double > > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Word_1getSpanStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = (unsigned long)((freeling::word const *)arg1)->get_span_start();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Word_1getSpanFinish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = (unsigned long)((freeling::word const *)arg1)->get_span_finish();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_Word_1foundInDict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = (bool)((freeling::word const *)arg1)->found_in_dict();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1setFoundInDict(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_found_in_dict(arg2);
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_Word_1hasRetokenizable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = (bool)((freeling::word const *)arg1)->has_retokenizable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1lockAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  (arg1)->lock_analysis();
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_Word_1isLocked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = (bool)((freeling::word const *)arg1)->is_locked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1addAlternative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::wstring *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (int)jarg3; 
  (arg1)->add_alternative((std::wstring const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1setAlternatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::list< std::pair< std::wstring,int > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  arg2 = *(std::list< std::pair< std::wstring,int > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::pair< std::wstring,int > > const & reference is null");
    return ;
  } 
  (arg1)->set_alternatives((std::list< std::pair< std::wstring,int > > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1clearAlternatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  (arg1)->clear_alternatives();
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_Word_1hasAlternatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = (bool)((freeling::word const *)arg1)->has_alternatives();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Word_1getAlternatives(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::list< std::pair< std::wstring,int > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = (std::list< std::pair< std::wstring,int > > *) &(arg1)->get_alternatives();
  *(std::list< std::pair< std::wstring,int > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Word_1alternativesBegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  SwigValueWrapper< std::list< std::pair< std::wstring,int > >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = (arg1)->alternatives_begin();
  *(std::list< std::pair< std::wstring,int > >::iterator **)&jresult = new std::list< std::pair< std::wstring,int > >::iterator((const std::list< std::pair< std::wstring,int > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Word_1alternativesEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  SwigValueWrapper< std::list< std::pair< std::wstring,int > >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = (arg1)->alternatives_end();
  *(std::list< std::pair< std::wstring,int > >::iterator **)&jresult = new std::list< std::pair< std::wstring,int > >::iterator((const std::list< std::pair< std::wstring,int > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1addAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  freeling::analysis *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::word **)&jarg1; 
  arg2 = *(freeling::analysis **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::analysis const & reference is null");
    return ;
  } 
  (arg1)->add_analysis((freeling::analysis const &)*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1setAnalysis_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  freeling::analysis *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::word **)&jarg1; 
  arg2 = *(freeling::analysis **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::analysis const & reference is null");
    return ;
  } 
  (arg1)->set_analysis((freeling::analysis const &)*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1setAnalysis_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::list< freeling::analysis > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::word **)&jarg1; 
  arg2 = *(std::list< freeling::analysis > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::analysis > const & reference is null");
    return ;
  } 
  (arg1)->set_analysis((std::list< freeling::analysis > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1setForm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->set_form((std::wstring const &)*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1setPhForm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->set_ph_form((std::wstring const &)*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1setSpan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  unsigned long arg2 ;
  unsigned long arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (unsigned long)jarg3; 
  (arg1)->set_span(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1setPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->set_position(arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Word_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = ((freeling::word const *)arg1)->get_position();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_Word_1findTagMatch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  freeling::regexp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  arg2 = *(freeling::regexp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::regexp & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->find_tag_match(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_edu_upc_freeling_freelingJNI_Word_1getNAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = (int)((freeling::word const *)arg1)->get_n_analysis();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1unselectAllAnalysis_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->unselect_all_analysis(arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1unselectAllAnalysis_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  (arg1)->unselect_all_analysis();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1selectAllAnalysis_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->select_all_analysis(arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1selectAllAnalysis_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  (arg1)->select_all_analysis();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1selectAnalysis_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  freeling::word::iterator arg2 ;
  int arg3 ;
  freeling::word::iterator *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  argp2 = *(freeling::word::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null freeling::word::iterator");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  (arg1)->select_analysis(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1selectAnalysis_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  freeling::word::iterator arg2 ;
  freeling::word::iterator *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  argp2 = *(freeling::word::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null freeling::word::iterator");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->select_analysis(arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1unselectAnalysis_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  freeling::word::iterator arg2 ;
  int arg3 ;
  freeling::word::iterator *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  argp2 = *(freeling::word::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null freeling::word::iterator");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  (arg1)->unselect_analysis(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Word_1unselectAnalysis_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  freeling::word *arg1 = (freeling::word *) 0 ;
  freeling::word::iterator arg2 ;
  freeling::word::iterator *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  argp2 = *(freeling::word::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null freeling::word::iterator");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->unselect_analysis(arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Word_1getAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::list< freeling::analysis > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = ((freeling::word const *)arg1)->get_analysis();
  *(std::list< freeling::analysis > **)&jresult = new std::list< freeling::analysis >((const std::list< freeling::analysis > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Word_1analysisBegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  freeling::word::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = (arg1)->analysis_begin();
  *(freeling::word::iterator **)&jresult = new freeling::word::iterator((const freeling::word::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Word_1analysisEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::word *arg1 = (freeling::word *) 0 ;
  freeling::word::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::word **)&jarg1; 
  result = (arg1)->analysis_end();
  *(freeling::word::iterator **)&jresult = new freeling::word::iterator((const freeling::word::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Node_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  freeling::node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (freeling::node *)new freeling::node();
  *(freeling::node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Node_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  freeling::node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (freeling::node *)new freeling::node((std::wstring const &)*arg1);
  *(freeling::node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Node(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::node *arg1 = (freeling::node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::node **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Node_1getNodeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::node *arg1 = (freeling::node *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::node **)&jarg1; 
  result = ((freeling::node const *)arg1)->get_node_id();
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Node_1setNodeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::node *arg1 = (freeling::node *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::node **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->set_node_id((std::wstring const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Node_1getLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::node *arg1 = (freeling::node *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::node **)&jarg1; 
  result = ((freeling::node const *)arg1)->get_label();
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Node_1getWord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::node *arg1 = (freeling::node *) 0 ;
  freeling::word *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::node **)&jarg1; 
  result = (freeling::word *) &(arg1)->get_word();
  *(freeling::word **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Node_1setLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::node *arg1 = (freeling::node *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::node **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->set_label((std::wstring const &)*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Node_1setWord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::node *arg1 = (freeling::node *) 0 ;
  freeling::word *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::node **)&jarg1; 
  arg2 = *(freeling::word **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::word & reference is null");
    return ;
  } 
  (arg1)->set_word(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_Node_1isHead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::node *arg1 = (freeling::node *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::node **)&jarg1; 
  result = (bool)((freeling::node const *)arg1)->is_head();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Node_1setHead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  freeling::node *arg1 = (freeling::node *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::node **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_head(arg2);
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_Node_1isChunk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::node *arg1 = (freeling::node *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::node **)&jarg1; 
  result = (bool)((freeling::node const *)arg1)->is_chunk();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Node_1setChunk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  freeling::node *arg1 = (freeling::node *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::node **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->set_chunk(arg2);
}


SWIGEXPORT jint JNICALL Java_edu_upc_freeling_freelingJNI_Node_1getChunkOrd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  freeling::node *arg1 = (freeling::node *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::node **)&jarg1; 
  result = (int)((freeling::node const *)arg1)->get_chunk_ord();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1ParseTree_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  freeling::parse_tree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (freeling::parse_tree *)new freeling::parse_tree();
  *(freeling::parse_tree **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1ParseTree_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::parse_tree::iterator arg1 ;
  freeling::parse_tree::iterator *argp1 ;
  freeling::parse_tree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(freeling::parse_tree::iterator **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null freeling::parse_tree::iterator");
    return 0;
  }
  arg1 = *argp1; 
  result = (freeling::parse_tree *)new freeling::parse_tree(arg1);
  *(freeling::parse_tree **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1ParseTree_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::node *arg1 = 0 ;
  freeling::parse_tree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::node **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::node const & reference is null");
    return 0;
  } 
  result = (freeling::parse_tree *)new freeling::parse_tree((freeling::node const &)*arg1);
  *(freeling::parse_tree **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ParseTree_1buildNodeIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::parse_tree *arg1 = (freeling::parse_tree *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::parse_tree **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->build_node_index((std::wstring const &)*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ParseTree_1rebuildNodeIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  freeling::parse_tree *arg1 = (freeling::parse_tree *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::parse_tree **)&jarg1; 
  (arg1)->rebuild_node_index();
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_ParseTree_1getNodeById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  freeling::parse_tree *arg1 = (freeling::parse_tree *) 0 ;
  std::wstring *arg2 = 0 ;
  freeling::parse_tree::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::parse_tree **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (arg1)->get_node_by_id((std::wstring const &)*arg2);
  *(freeling::parse_tree::iterator **)&jresult = new freeling::parse_tree::iterator((const freeling::parse_tree::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_ParseTree_1getNodeByPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  freeling::parse_tree *arg1 = (freeling::parse_tree *) 0 ;
  size_t arg2 ;
  freeling::parse_tree::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::parse_tree **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (arg1)->get_node_by_pos(arg2);
  *(freeling::parse_tree::iterator **)&jresult = new freeling::parse_tree::iterator((const freeling::parse_tree::iterator &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1ParseTree(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::parse_tree *arg1 = (freeling::parse_tree *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::parse_tree **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Depnode_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  freeling::depnode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (freeling::depnode *)new freeling::depnode();
  *(freeling::depnode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Depnode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  freeling::depnode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (freeling::depnode *)new freeling::depnode((std::wstring const &)*arg1);
  *(freeling::depnode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Depnode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::node *arg1 = 0 ;
  freeling::depnode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::node **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::node const & reference is null");
    return 0;
  } 
  result = (freeling::depnode *)new freeling::depnode((freeling::node const &)*arg1);
  *(freeling::depnode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Depnode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::depnode *arg1 = (freeling::depnode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::depnode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Depnode_1setLink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::depnode *arg1 = (freeling::depnode *) 0 ;
  freeling::parse_tree::iterator arg2 ;
  freeling::parse_tree::iterator const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::depnode **)&jarg1; 
  argp2 = *(freeling::parse_tree::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null freeling::parse_tree::iterator const");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set_link(arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Depnode_1getLink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::depnode *arg1 = (freeling::depnode *) 0 ;
  freeling::parse_tree::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::depnode **)&jarg1; 
  result = (arg1)->get_link();
  *(freeling::parse_tree::iterator **)&jresult = new freeling::parse_tree::iterator((const freeling::parse_tree::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Depnode_1getLinkRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::depnode *arg1 = (freeling::depnode *) 0 ;
  freeling::tree< freeling::node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::depnode **)&jarg1; 
  result = (freeling::tree< freeling::node > *) &(arg1)->get_link_ref();
  *(freeling::tree< freeling::node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Depnode_1setLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::depnode *arg1 = (freeling::depnode *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::depnode **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->set_label((std::wstring const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1DepTree_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  freeling::dep_tree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (freeling::dep_tree *)new freeling::dep_tree();
  *(freeling::dep_tree **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1DepTree_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::depnode *arg1 = 0 ;
  freeling::dep_tree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::depnode **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::depnode const & reference is null");
    return 0;
  } 
  result = (freeling::dep_tree *)new freeling::dep_tree((freeling::depnode const &)*arg1);
  *(freeling::dep_tree **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_DepTree_1getNodeByPos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  freeling::dep_tree *arg1 = (freeling::dep_tree *) 0 ;
  size_t arg2 ;
  freeling::dep_tree::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::dep_tree **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (arg1)->get_node_by_pos(arg2);
  *(freeling::dep_tree::iterator **)&jresult = new freeling::dep_tree::iterator((const freeling::dep_tree::iterator &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_DepTree_1rebuildNodeIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  freeling::dep_tree *arg1 = (freeling::dep_tree *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::dep_tree **)&jarg1; 
  (arg1)->rebuild_node_index();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1DepTree(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::dep_tree *arg1 = (freeling::dep_tree *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::dep_tree **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Sentence_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  freeling::sentence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (freeling::sentence *)new freeling::sentence();
  *(freeling::sentence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Sentence_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< freeling::word > *arg1 = 0 ;
  freeling::sentence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< freeling::word > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::word > const & reference is null");
    return 0;
  } 
  result = (freeling::sentence *)new freeling::sentence((std::list< freeling::word > const &)*arg1);
  *(freeling::sentence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Sentence_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::sentence *arg1 = 0 ;
  freeling::sentence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sentence **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sentence const & reference is null");
    return 0;
  } 
  result = (freeling::sentence *)new freeling::sentence((freeling::sentence const &)*arg1);
  *(freeling::sentence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Sentence_1operator_1assignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  freeling::sentence *arg2 = 0 ;
  freeling::sentence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::sentence **)&jarg1; 
  arg2 = *(freeling::sentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sentence const & reference is null");
    return 0;
  } 
  result = (freeling::sentence *) &(arg1)->operator =((freeling::sentence const &)*arg2);
  *(freeling::sentence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Sentence(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::sentence **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Sentence_1numKbest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sentence **)&jarg1; 
  result = (unsigned int)((freeling::sentence const *)arg1)->num_kbest();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Sentence_1pushBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  freeling::word *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::sentence **)&jarg1; 
  arg2 = *(freeling::word **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::word const & reference is null");
    return ;
  } 
  (arg1)->push_back((freeling::word const &)*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Sentence_1rebuildWordIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sentence **)&jarg1; 
  (arg1)->rebuild_word_index();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Sentence_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sentence **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Sentence_1setSentenceId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sentence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->set_sentence_id((std::wstring const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Sentence_1getSentenceId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sentence **)&jarg1; 
  result = (arg1)->get_sentence_id();
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Sentence_1setParseTree_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  freeling::parse_tree *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::sentence **)&jarg1; 
  arg2 = *(freeling::parse_tree **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::parse_tree const & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->set_parse_tree((freeling::parse_tree const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Sentence_1setParseTree_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  freeling::parse_tree *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::sentence **)&jarg1; 
  arg2 = *(freeling::parse_tree **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::parse_tree const & reference is null");
    return ;
  } 
  (arg1)->set_parse_tree((freeling::parse_tree const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Sentence_1getParseTree_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  int arg2 ;
  freeling::parse_tree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sentence **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (freeling::parse_tree *) &(arg1)->get_parse_tree(arg2);
  *(freeling::parse_tree **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Sentence_1getParseTree_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  freeling::parse_tree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sentence **)&jarg1; 
  result = (freeling::parse_tree *) &(arg1)->get_parse_tree();
  *(freeling::parse_tree **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_Sentence_1isParsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sentence **)&jarg1; 
  result = (bool)((freeling::sentence const *)arg1)->is_parsed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Sentence_1setDepTree_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  freeling::dep_tree *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::sentence **)&jarg1; 
  arg2 = *(freeling::dep_tree **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::dep_tree const & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->set_dep_tree((freeling::dep_tree const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Sentence_1setDepTree_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  freeling::dep_tree *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::sentence **)&jarg1; 
  arg2 = *(freeling::dep_tree **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::dep_tree const & reference is null");
    return ;
  } 
  (arg1)->set_dep_tree((freeling::dep_tree const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Sentence_1getDepTree_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  int arg2 ;
  freeling::dep_tree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sentence **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (freeling::dep_tree *) &(arg1)->get_dep_tree(arg2);
  *(freeling::dep_tree **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Sentence_1getDepTree_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  freeling::dep_tree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sentence **)&jarg1; 
  result = (freeling::dep_tree *) &(arg1)->get_dep_tree();
  *(freeling::dep_tree **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_Sentence_1isDepParsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sentence **)&jarg1; 
  result = (bool)((freeling::sentence const *)arg1)->is_dep_parsed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Sentence_1getWords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  std::vector< freeling::word > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sentence **)&jarg1; 
  result = ((freeling::sentence const *)arg1)->get_words();
  *(std::vector< freeling::word > **)&jresult = new std::vector< freeling::word >((const std::vector< freeling::word > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Sentence_1wordsBegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  freeling::sentence::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sentence **)&jarg1; 
  result = (arg1)->words_begin();
  *(freeling::sentence::iterator **)&jresult = new freeling::sentence::iterator((const freeling::sentence::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Sentence_1wordsEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  freeling::sentence::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sentence **)&jarg1; 
  result = (arg1)->words_end();
  *(freeling::sentence::iterator **)&jresult = new freeling::sentence::iterator((const freeling::sentence::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Paragraph(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  freeling::paragraph *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (freeling::paragraph *)new freeling::paragraph();
  *(freeling::paragraph **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Paragraph(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::paragraph *arg1 = (freeling::paragraph *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::paragraph **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Document(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  freeling::document *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (freeling::document *)new freeling::document();
  *(freeling::document **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Document(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::document *arg1 = (freeling::document *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::document **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Document_1addPositive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  freeling::document *arg1 = (freeling::document *) 0 ;
  std::wstring *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::document **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (int)jarg3; 
  (arg1)->add_positive((std::wstring const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Document_1addPositive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  freeling::document *arg1 = (freeling::document *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::document **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  (arg1)->add_positive((std::wstring const &)*arg2,(std::wstring const &)*arg3);
}


SWIGEXPORT jint JNICALL Java_edu_upc_freeling_freelingJNI_Document_1getCorefGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  freeling::document *arg1 = (freeling::document *) 0 ;
  std::wstring *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::document **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (int)((freeling::document const *)arg1)->get_coref_group((std::wstring const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Document_1getCorefNodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  freeling::document *arg1 = (freeling::document *) 0 ;
  int arg2 ;
  std::list< std::wstring > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::document **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((freeling::document const *)arg1)->get_coref_nodes(arg2);
  *(std::list< std::wstring > **)&jresult = new std::list< std::wstring >((const std::list< std::wstring > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_Document_1isCoref(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  freeling::document *arg1 = (freeling::document *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::document **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  result = (bool)((freeling::document const *)arg1)->is_coref((std::wstring const &)*arg2,(std::wstring const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Traces_1TraceLevel_1set(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  freeling::traces::TraceLevel = arg1;
}


SWIGEXPORT jint JNICALL Java_edu_upc_freeling_freelingJNI_Traces_1TraceLevel_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)freeling::traces::TraceLevel;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Traces_1TraceModule_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned long arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned long)jarg1; 
  freeling::traces::TraceModule = arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Traces_1TraceModule_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned long)freeling::traces::TraceModule;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Traces(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  freeling::traces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (freeling::traces *)new freeling::traces();
  *(freeling::traces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Traces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::traces *arg1 = (freeling::traces *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::traces **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1LangIdent_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  freeling::lang_ident *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (freeling::lang_ident *)new freeling::lang_ident();
  *(freeling::lang_ident **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1LangIdent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  freeling::lang_ident *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (freeling::lang_ident *)new freeling::lang_ident((std::wstring const &)*arg1);
  *(freeling::lang_ident **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1LangIdent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::lang_ident *arg1 = (freeling::lang_ident *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::lang_ident **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_LangIdent_1addLanguage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::lang_ident *arg1 = (freeling::lang_ident *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::lang_ident **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->add_language((std::wstring const &)*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_LangIdent_1trainLanguage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  freeling::lang_ident *arg1 = (freeling::lang_ident *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::lang_ident **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return ;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  std::wstring arg4_str;
  if (arg4_len) {
    arg4_str.reserve(arg4_len);
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4_str.push_back((wchar_t)arg4_pstr[i]);
    }
  }
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  (arg1)->train_language((std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4);
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_LangIdent_1identifyLanguage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  freeling::lang_ident *arg1 = (freeling::lang_ident *) 0 ;
  std::wstring *arg2 = 0 ;
  std::set< std::wstring > *arg3 = 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::lang_ident **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(std::set< std::wstring > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::set< std::wstring > const & reference is null");
    return 0;
  } 
  result = ((freeling::lang_ident const *)arg1)->identify_language((std::wstring const &)*arg2,(std::set< std::wstring > const &)*arg3);
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_LangIdent_1identifyLanguage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  freeling::lang_ident *arg1 = (freeling::lang_ident *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::lang_ident **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = ((freeling::lang_ident const *)arg1)->identify_language((std::wstring const &)*arg2);
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_LangIdent_1rankLanguages_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4) {
  freeling::lang_ident *arg1 = (freeling::lang_ident *) 0 ;
  std::vector< std::pair< double,std::wstring > > *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::set< std::wstring > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::lang_ident **)&jarg1; 
  arg2 = *(std::vector< std::pair< double,std::wstring > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< double,std::wstring > > & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = *(std::set< std::wstring > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::set< std::wstring > const & reference is null");
    return ;
  } 
  ((freeling::lang_ident const *)arg1)->rank_languages(*arg2,(std::wstring const &)*arg3,(std::set< std::wstring > const &)*arg4);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_LangIdent_1rankLanguages_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  freeling::lang_ident *arg1 = (freeling::lang_ident *) 0 ;
  std::vector< std::pair< double,std::wstring > > *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::lang_ident **)&jarg1; 
  arg2 = *(std::vector< std::pair< double,std::wstring > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< double,std::wstring > > & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  ((freeling::lang_ident const *)arg1)->rank_languages(*arg2,(std::wstring const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Tokenizer(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  freeling::tokenizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (freeling::tokenizer *)new freeling::tokenizer((std::wstring const &)*arg1);
  *(freeling::tokenizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Tokenizer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::tokenizer *arg1 = (freeling::tokenizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::tokenizer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Tokenizer_1tokenize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  freeling::tokenizer *arg1 = (freeling::tokenizer *) 0 ;
  std::wstring *arg2 = 0 ;
  std::list< freeling::word > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(freeling::tokenizer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(std::list< freeling::word > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::word > & reference is null");
    return ;
  } 
  ((freeling::tokenizer const *)arg1)->tokenize((std::wstring const &)*arg2,*arg3);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Tokenizer_1tokenize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  freeling::tokenizer *arg1 = (freeling::tokenizer *) 0 ;
  std::wstring *arg2 = 0 ;
  std::list< freeling::word > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tokenizer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = ((freeling::tokenizer const *)arg1)->tokenize((std::wstring const &)*arg2);
  *(std::list< freeling::word > **)&jresult = new std::list< freeling::word >((const std::list< freeling::word > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Tokenizer_1tokenize_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  freeling::tokenizer *arg1 = (freeling::tokenizer *) 0 ;
  std::wstring *arg2 = 0 ;
  unsigned long *arg3 = 0 ;
  std::list< freeling::word > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(freeling::tokenizer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(unsigned long **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned long & reference is null");
    return ;
  } 
  arg4 = *(std::list< freeling::word > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::word > & reference is null");
    return ;
  } 
  ((freeling::tokenizer const *)arg1)->tokenize((std::wstring const &)*arg2,*arg3,*arg4);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Tokenizer_1tokenize_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  freeling::tokenizer *arg1 = (freeling::tokenizer *) 0 ;
  std::wstring *arg2 = 0 ;
  unsigned long *arg3 = 0 ;
  std::list< freeling::word > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tokenizer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(unsigned long **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned long & reference is null");
    return 0;
  } 
  result = ((freeling::tokenizer const *)arg1)->tokenize((std::wstring const &)*arg2,*arg3);
  *(std::list< freeling::word > **)&jresult = new std::list< freeling::word >((const std::list< freeling::word > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Splitter(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  freeling::splitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (freeling::splitter *)new freeling::splitter((std::wstring const &)*arg1);
  *(freeling::splitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Splitter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::splitter *arg1 = (freeling::splitter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::splitter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Splitter_1split_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_) {
  freeling::splitter *arg1 = (freeling::splitter *) 0 ;
  std::list< freeling::word > *arg2 = 0 ;
  bool arg3 ;
  std::list< freeling::sentence > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(freeling::splitter **)&jarg1; 
  arg2 = *(std::list< freeling::word > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::word > const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = *(std::list< freeling::sentence > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::sentence > & reference is null");
    return ;
  } 
  (arg1)->split((std::list< freeling::word > const &)*arg2,arg3,*arg4);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Splitter_1split_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  freeling::splitter *arg1 = (freeling::splitter *) 0 ;
  std::list< freeling::word > *arg2 = 0 ;
  bool arg3 ;
  std::list< freeling::sentence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::splitter **)&jarg1; 
  arg2 = *(std::list< freeling::word > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::word > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->split((std::list< freeling::word > const &)*arg2,arg3);
  *(std::list< freeling::sentence > **)&jresult = new std::list< freeling::sentence >((const std::list< freeling::sentence > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1Lang_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->Lang = *arg2;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1Lang_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  result = (std::wstring *) & ((arg1)->Lang);
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1AffixAnalysis_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->AffixAnalysis = arg2;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1AffixAnalysis_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  result = (bool) ((arg1)->AffixAnalysis);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1MultiwordsDetection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->MultiwordsDetection = arg2;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1MultiwordsDetection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  result = (bool) ((arg1)->MultiwordsDetection);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1NumbersDetection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NumbersDetection = arg2;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1NumbersDetection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  result = (bool) ((arg1)->NumbersDetection);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1PunctuationDetection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->PunctuationDetection = arg2;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1PunctuationDetection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  result = (bool) ((arg1)->PunctuationDetection);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1DatesDetection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->DatesDetection = arg2;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1DatesDetection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  result = (bool) ((arg1)->DatesDetection);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1QuantitiesDetection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->QuantitiesDetection = arg2;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1QuantitiesDetection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  result = (bool) ((arg1)->QuantitiesDetection);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1DictionarySearch_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->DictionarySearch = arg2;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1DictionarySearch_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  result = (bool) ((arg1)->DictionarySearch);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1ProbabilityAssignment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ProbabilityAssignment = arg2;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1ProbabilityAssignment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  result = (bool) ((arg1)->ProbabilityAssignment);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1UserMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->UserMap = arg2;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1UserMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  result = (bool) ((arg1)->UserMap);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1NERecognition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NERecognition = arg2;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1NERecognition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  result = (bool) ((arg1)->NERecognition);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1LocutionsFile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->LocutionsFile = *arg2;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1LocutionsFile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  result = (std::wstring *) & ((arg1)->LocutionsFile);
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1QuantitiesFile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->QuantitiesFile = *arg2;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1QuantitiesFile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  result = (std::wstring *) & ((arg1)->QuantitiesFile);
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1AffixFile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->AffixFile = *arg2;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1AffixFile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  result = (std::wstring *) & ((arg1)->AffixFile);
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1ProbabilityFile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->ProbabilityFile = *arg2;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1ProbabilityFile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  result = (std::wstring *) & ((arg1)->ProbabilityFile);
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1DictionaryFile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->DictionaryFile = *arg2;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1DictionaryFile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  result = (std::wstring *) & ((arg1)->DictionaryFile);
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1NPdataFile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->NPdataFile = *arg2;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1NPdataFile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  result = (std::wstring *) & ((arg1)->NPdataFile);
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1PunctuationFile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->PunctuationFile = *arg2;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1PunctuationFile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  result = (std::wstring *) & ((arg1)->PunctuationFile);
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1UserMapFile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->UserMapFile = *arg2;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1UserMapFile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  result = (std::wstring *) & ((arg1)->UserMapFile);
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1Decimal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->Decimal = *arg2;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1Decimal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  result = (std::wstring *) & ((arg1)->Decimal);
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1Thousand_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->Thousand = *arg2;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1Thousand_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  result = (std::wstring *) & ((arg1)->Thousand);
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1ProbabilityThreshold_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->ProbabilityThreshold = arg2;
}


SWIGEXPORT jdouble JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1ProbabilityThreshold_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  result = (double) ((arg1)->ProbabilityThreshold);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1InverseDict_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->InverseDict = arg2;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1InverseDict_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  result = (bool) ((arg1)->InverseDict);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1RetokContractions_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->RetokContractions = arg2;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1RetokContractions_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  result = (bool) ((arg1)->RetokContractions);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1MacoOptions(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  freeling::maco_options *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (freeling::maco_options *)new freeling::maco_options((std::wstring const &)*arg1);
  *(freeling::maco_options **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1MacoOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::maco_options **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1setActiveModules_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jboolean jarg4, jboolean jarg5, jboolean jarg6, jboolean jarg7, jboolean jarg8, jboolean jarg9, jboolean jarg10, jboolean jarg11, jboolean jarg12) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  bool arg8 ;
  bool arg9 ;
  bool arg10 ;
  bool arg11 ;
  bool arg12 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  arg10 = jarg10 ? true : false; 
  arg11 = jarg11 ? true : false; 
  arg12 = jarg12 ? true : false; 
  (arg1)->set_active_modules(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1setActiveModules_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jboolean jarg4, jboolean jarg5, jboolean jarg6, jboolean jarg7, jboolean jarg8, jboolean jarg9, jboolean jarg10, jboolean jarg11) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  bool arg8 ;
  bool arg9 ;
  bool arg10 ;
  bool arg11 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  arg10 = jarg10 ? true : false; 
  arg11 = jarg11 ? true : false; 
  (arg1)->set_active_modules(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1setDataFiles_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8, jstring jarg9, jstring jarg10) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring *arg4 = 0 ;
  std::wstring *arg5 = 0 ;
  std::wstring *arg6 = 0 ;
  std::wstring *arg7 = 0 ;
  std::wstring *arg8 = 0 ;
  std::wstring *arg9 = 0 ;
  std::wstring *arg10 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return ;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  std::wstring arg4_str;
  if (arg4_len) {
    arg4_str.reserve(arg4_len);
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4_str.push_back((wchar_t)arg4_pstr[i]);
    }
  }
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg5_pstr = jenv->GetStringChars(jarg5, 0);
  if (!arg5_pstr) return ;
  jsize arg5_len = jenv->GetStringLength(jarg5);
  std::wstring arg5_str;
  if (arg5_len) {
    arg5_str.reserve(arg5_len);
    for (jsize i = 0; i < arg5_len; ++i) {
      arg5_str.push_back((wchar_t)arg5_pstr[i]);
    }
  }
  arg5 = &arg5_str;
  jenv->ReleaseStringChars(jarg5, arg5_pstr);
  
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg6_pstr = jenv->GetStringChars(jarg6, 0);
  if (!arg6_pstr) return ;
  jsize arg6_len = jenv->GetStringLength(jarg6);
  std::wstring arg6_str;
  if (arg6_len) {
    arg6_str.reserve(arg6_len);
    for (jsize i = 0; i < arg6_len; ++i) {
      arg6_str.push_back((wchar_t)arg6_pstr[i]);
    }
  }
  arg6 = &arg6_str;
  jenv->ReleaseStringChars(jarg6, arg6_pstr);
  
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg7_pstr = jenv->GetStringChars(jarg7, 0);
  if (!arg7_pstr) return ;
  jsize arg7_len = jenv->GetStringLength(jarg7);
  std::wstring arg7_str;
  if (arg7_len) {
    arg7_str.reserve(arg7_len);
    for (jsize i = 0; i < arg7_len; ++i) {
      arg7_str.push_back((wchar_t)arg7_pstr[i]);
    }
  }
  arg7 = &arg7_str;
  jenv->ReleaseStringChars(jarg7, arg7_pstr);
  
  if(!jarg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg8_pstr = jenv->GetStringChars(jarg8, 0);
  if (!arg8_pstr) return ;
  jsize arg8_len = jenv->GetStringLength(jarg8);
  std::wstring arg8_str;
  if (arg8_len) {
    arg8_str.reserve(arg8_len);
    for (jsize i = 0; i < arg8_len; ++i) {
      arg8_str.push_back((wchar_t)arg8_pstr[i]);
    }
  }
  arg8 = &arg8_str;
  jenv->ReleaseStringChars(jarg8, arg8_pstr);
  
  if(!jarg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg9_pstr = jenv->GetStringChars(jarg9, 0);
  if (!arg9_pstr) return ;
  jsize arg9_len = jenv->GetStringLength(jarg9);
  std::wstring arg9_str;
  if (arg9_len) {
    arg9_str.reserve(arg9_len);
    for (jsize i = 0; i < arg9_len; ++i) {
      arg9_str.push_back((wchar_t)arg9_pstr[i]);
    }
  }
  arg9 = &arg9_str;
  jenv->ReleaseStringChars(jarg9, arg9_pstr);
  
  if(!jarg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg10_pstr = jenv->GetStringChars(jarg10, 0);
  if (!arg10_pstr) return ;
  jsize arg10_len = jenv->GetStringLength(jarg10);
  std::wstring arg10_str;
  if (arg10_len) {
    arg10_str.reserve(arg10_len);
    for (jsize i = 0; i < arg10_len; ++i) {
      arg10_str.push_back((wchar_t)arg10_pstr[i]);
    }
  }
  arg10 = &arg10_str;
  jenv->ReleaseStringChars(jarg10, arg10_pstr);
  
  (arg1)->set_data_files((std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4,(std::wstring const &)*arg5,(std::wstring const &)*arg6,(std::wstring const &)*arg7,(std::wstring const &)*arg8,(std::wstring const &)*arg9,(std::wstring const &)*arg10);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1setDataFiles_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8, jstring jarg9) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring *arg4 = 0 ;
  std::wstring *arg5 = 0 ;
  std::wstring *arg6 = 0 ;
  std::wstring *arg7 = 0 ;
  std::wstring *arg8 = 0 ;
  std::wstring *arg9 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return ;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  std::wstring arg4_str;
  if (arg4_len) {
    arg4_str.reserve(arg4_len);
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4_str.push_back((wchar_t)arg4_pstr[i]);
    }
  }
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg5_pstr = jenv->GetStringChars(jarg5, 0);
  if (!arg5_pstr) return ;
  jsize arg5_len = jenv->GetStringLength(jarg5);
  std::wstring arg5_str;
  if (arg5_len) {
    arg5_str.reserve(arg5_len);
    for (jsize i = 0; i < arg5_len; ++i) {
      arg5_str.push_back((wchar_t)arg5_pstr[i]);
    }
  }
  arg5 = &arg5_str;
  jenv->ReleaseStringChars(jarg5, arg5_pstr);
  
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg6_pstr = jenv->GetStringChars(jarg6, 0);
  if (!arg6_pstr) return ;
  jsize arg6_len = jenv->GetStringLength(jarg6);
  std::wstring arg6_str;
  if (arg6_len) {
    arg6_str.reserve(arg6_len);
    for (jsize i = 0; i < arg6_len; ++i) {
      arg6_str.push_back((wchar_t)arg6_pstr[i]);
    }
  }
  arg6 = &arg6_str;
  jenv->ReleaseStringChars(jarg6, arg6_pstr);
  
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg7_pstr = jenv->GetStringChars(jarg7, 0);
  if (!arg7_pstr) return ;
  jsize arg7_len = jenv->GetStringLength(jarg7);
  std::wstring arg7_str;
  if (arg7_len) {
    arg7_str.reserve(arg7_len);
    for (jsize i = 0; i < arg7_len; ++i) {
      arg7_str.push_back((wchar_t)arg7_pstr[i]);
    }
  }
  arg7 = &arg7_str;
  jenv->ReleaseStringChars(jarg7, arg7_pstr);
  
  if(!jarg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg8_pstr = jenv->GetStringChars(jarg8, 0);
  if (!arg8_pstr) return ;
  jsize arg8_len = jenv->GetStringLength(jarg8);
  std::wstring arg8_str;
  if (arg8_len) {
    arg8_str.reserve(arg8_len);
    for (jsize i = 0; i < arg8_len; ++i) {
      arg8_str.push_back((wchar_t)arg8_pstr[i]);
    }
  }
  arg8 = &arg8_str;
  jenv->ReleaseStringChars(jarg8, arg8_pstr);
  
  if(!jarg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg9_pstr = jenv->GetStringChars(jarg9, 0);
  if (!arg9_pstr) return ;
  jsize arg9_len = jenv->GetStringLength(jarg9);
  std::wstring arg9_str;
  if (arg9_len) {
    arg9_str.reserve(arg9_len);
    for (jsize i = 0; i < arg9_len; ++i) {
      arg9_str.push_back((wchar_t)arg9_pstr[i]);
    }
  }
  arg9 = &arg9_str;
  jenv->ReleaseStringChars(jarg9, arg9_pstr);
  
  (arg1)->set_data_files((std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4,(std::wstring const &)*arg5,(std::wstring const &)*arg6,(std::wstring const &)*arg7,(std::wstring const &)*arg8,(std::wstring const &)*arg9);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1setNummericalPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  (arg1)->set_nummerical_points((std::wstring const &)*arg2,(std::wstring const &)*arg3);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1setThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_threshold(arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1setInverseDictionary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_inverse_dict(arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_MacoOptions_1setRetokenizeContractions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_retok_contractions(arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Maco(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::maco_options *arg1 = 0 ;
  freeling::maco *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::maco_options **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::maco_options const & reference is null");
    return 0;
  } 
  result = (freeling::maco *)new freeling::maco((freeling::maco_options const &)*arg1);
  *(freeling::maco **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Maco(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::maco *arg1 = (freeling::maco *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::maco **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Maco_1analyze_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::maco *arg1 = (freeling::maco *) 0 ;
  freeling::sentence *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::maco **)&jarg1; 
  arg2 = *(freeling::sentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sentence & reference is null");
    return ;
  } 
  ((freeling::maco const *)arg1)->analyze(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Maco_1analyze_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::maco *arg1 = (freeling::maco *) 0 ;
  std::list< freeling::sentence > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::maco **)&jarg1; 
  arg2 = *(std::list< freeling::sentence > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::sentence > & reference is null");
    return ;
  } 
  ((freeling::maco const *)arg1)->analyze(*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1REMap(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  freeling::RE_map *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (freeling::RE_map *)new freeling::RE_map((std::wstring const &)*arg1);
  *(freeling::RE_map **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1REMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::RE_map *arg1 = (freeling::RE_map *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::RE_map **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_REMap_1annotateWord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::RE_map *arg1 = (freeling::RE_map *) 0 ;
  freeling::word *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::RE_map **)&jarg1; 
  arg2 = *(freeling::word **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::word & reference is null");
    return ;
  } 
  ((freeling::RE_map const *)arg1)->annotate_word(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_REMap_1analyze_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::RE_map *arg1 = (freeling::RE_map *) 0 ;
  freeling::sentence *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::RE_map **)&jarg1; 
  arg2 = *(freeling::sentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sentence & reference is null");
    return ;
  } 
  ((freeling::RE_map const *)arg1)->analyze(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_REMap_1analyze_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::RE_map *arg1 = (freeling::RE_map *) 0 ;
  std::list< freeling::sentence > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::RE_map **)&jarg1; 
  arg2 = *(std::list< freeling::sentence > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::sentence > & reference is null");
    return ;
  } 
  ((freeling::RE_map const *)arg1)->analyze(*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Numbers(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  freeling::numbers *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  result = (freeling::numbers *)new freeling::numbers((std::wstring const &)*arg1,(std::wstring const &)*arg2,(std::wstring const &)*arg3);
  *(freeling::numbers **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Numbers(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::numbers *arg1 = (freeling::numbers *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::numbers **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Numbers_1analyze_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::numbers *arg1 = (freeling::numbers *) 0 ;
  freeling::sentence *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::numbers **)&jarg1; 
  arg2 = *(freeling::sentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sentence & reference is null");
    return ;
  } 
  ((freeling::numbers const *)arg1)->analyze(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Numbers_1analyze_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::numbers *arg1 = (freeling::numbers *) 0 ;
  std::list< freeling::sentence > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::numbers **)&jarg1; 
  arg2 = *(std::list< freeling::sentence > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::sentence > & reference is null");
    return ;
  } 
  ((freeling::numbers const *)arg1)->analyze(*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Punts(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  freeling::punts *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (freeling::punts *)new freeling::punts((std::wstring const &)*arg1);
  *(freeling::punts **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Punts(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::punts *arg1 = (freeling::punts *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::punts **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Punts_1analyze_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::punts *arg1 = (freeling::punts *) 0 ;
  freeling::sentence *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::punts **)&jarg1; 
  arg2 = *(freeling::sentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sentence & reference is null");
    return ;
  } 
  ((freeling::punts const *)arg1)->analyze(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Punts_1analyze_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::punts *arg1 = (freeling::punts *) 0 ;
  std::list< freeling::sentence > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::punts **)&jarg1; 
  arg2 = *(std::list< freeling::sentence > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::sentence > & reference is null");
    return ;
  } 
  ((freeling::punts const *)arg1)->analyze(*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Dates(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  freeling::dates *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (freeling::dates *)new freeling::dates((std::wstring const &)*arg1);
  *(freeling::dates **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Dates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::dates *arg1 = (freeling::dates *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::dates **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Dates_1analyze_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::dates *arg1 = (freeling::dates *) 0 ;
  freeling::sentence *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::dates **)&jarg1; 
  arg2 = *(freeling::sentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sentence & reference is null");
    return ;
  } 
  ((freeling::dates const *)arg1)->analyze(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Dates_1analyze_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::dates *arg1 = (freeling::dates *) 0 ;
  std::list< freeling::sentence > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::dates **)&jarg1; 
  arg2 = *(std::list< freeling::sentence > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::sentence > & reference is null");
    return ;
  } 
  ((freeling::dates const *)arg1)->analyze(*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Dictionary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3, jstring jarg4, jboolean jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  bool arg3 ;
  std::wstring *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  freeling::dictionary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = jarg3 ? true : false; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  std::wstring arg4_str;
  if (arg4_len) {
    arg4_str.reserve(arg4_len);
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4_str.push_back((wchar_t)arg4_pstr[i]);
    }
  }
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (freeling::dictionary *)new freeling::dictionary((std::wstring const &)*arg1,(std::wstring const &)*arg2,arg3,(std::wstring const &)*arg4,arg5,arg6);
  *(freeling::dictionary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Dictionary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3, jstring jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  bool arg3 ;
  std::wstring *arg4 = 0 ;
  bool arg5 ;
  freeling::dictionary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = jarg3 ? true : false; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  std::wstring arg4_str;
  if (arg4_len) {
    arg4_str.reserve(arg4_len);
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4_str.push_back((wchar_t)arg4_pstr[i]);
    }
  }
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  arg5 = jarg5 ? true : false; 
  result = (freeling::dictionary *)new freeling::dictionary((std::wstring const &)*arg1,(std::wstring const &)*arg2,arg3,(std::wstring const &)*arg4,arg5);
  *(freeling::dictionary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Dictionary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  bool arg3 ;
  std::wstring *arg4 = 0 ;
  freeling::dictionary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = jarg3 ? true : false; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  std::wstring arg4_str;
  if (arg4_len) {
    arg4_str.reserve(arg4_len);
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4_str.push_back((wchar_t)arg4_pstr[i]);
    }
  }
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  result = (freeling::dictionary *)new freeling::dictionary((std::wstring const &)*arg1,(std::wstring const &)*arg2,arg3,(std::wstring const &)*arg4);
  *(freeling::dictionary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Dictionary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::dictionary **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Dictionary_1addAnalysis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  std::wstring *arg2 = 0 ;
  freeling::analysis *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(freeling::dictionary **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(freeling::analysis **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::analysis const & reference is null");
    return ;
  } 
  (arg1)->add_analysis((std::wstring const &)*arg2,(freeling::analysis const &)*arg3);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Dictionary_1removeEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::dictionary **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->remove_entry((std::wstring const &)*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Dictionary_1searchForm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  std::wstring *arg2 = 0 ;
  std::list< freeling::analysis > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(freeling::dictionary **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(std::list< freeling::analysis > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::analysis > & reference is null");
    return ;
  } 
  ((freeling::dictionary const *)arg1)->search_form((std::wstring const &)*arg2,*arg3);
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_Dictionary_1annotateWord_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jboolean jresult = 0 ;
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  freeling::word *arg2 = 0 ;
  std::list< freeling::word > *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(freeling::dictionary **)&jarg1; 
  arg2 = *(freeling::word **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::word & reference is null");
    return 0;
  } 
  arg3 = *(std::list< freeling::word > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::word > & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)((freeling::dictionary const *)arg1)->annotate_word(*arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_upc_freeling_freelingJNI_Dictionary_1annotateWord_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  freeling::word *arg2 = 0 ;
  std::list< freeling::word > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(freeling::dictionary **)&jarg1; 
  arg2 = *(freeling::word **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::word & reference is null");
    return 0;
  } 
  arg3 = *(std::list< freeling::word > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::word > & reference is null");
    return 0;
  } 
  result = (bool)((freeling::dictionary const *)arg1)->annotate_word(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Dictionary_1annotateWord_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  freeling::word *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::dictionary **)&jarg1; 
  arg2 = *(freeling::word **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::word & reference is null");
    return ;
  } 
  ((freeling::dictionary const *)arg1)->annotate_word(*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Dictionary_1getForms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::list< std::wstring > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::dictionary **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  result = ((freeling::dictionary const *)arg1)->get_forms((std::wstring const &)*arg2,(std::wstring const &)*arg3);
  *(std::list< std::wstring > **)&jresult = new std::list< std::wstring >((const std::list< std::wstring > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Dictionary_1analyze_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  freeling::sentence *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::dictionary **)&jarg1; 
  arg2 = *(freeling::sentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sentence & reference is null");
    return ;
  } 
  ((freeling::dictionary const *)arg1)->analyze(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Dictionary_1analyze_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  std::list< freeling::sentence > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::dictionary **)&jarg1; 
  arg2 = *(std::list< freeling::sentence > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::sentence > & reference is null");
    return ;
  } 
  ((freeling::dictionary const *)arg1)->analyze(*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Locutions(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  freeling::locutions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (freeling::locutions *)new freeling::locutions((std::wstring const &)*arg1);
  *(freeling::locutions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Locutions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::locutions *arg1 = (freeling::locutions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::locutions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Locutions_1addLocution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::locutions *arg1 = (freeling::locutions *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::locutions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->add_locution((std::wstring const &)*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Locutions_1analyze_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::locutions *arg1 = (freeling::locutions *) 0 ;
  freeling::sentence *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::locutions **)&jarg1; 
  arg2 = *(freeling::sentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sentence & reference is null");
    return ;
  } 
  ((freeling::locutions const *)arg1)->analyze(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Locutions_1analyze_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::locutions *arg1 = (freeling::locutions *) 0 ;
  std::list< freeling::sentence > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::locutions **)&jarg1; 
  arg2 = *(std::list< freeling::sentence > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::sentence > & reference is null");
    return ;
  } 
  ((freeling::locutions const *)arg1)->analyze(*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Ner(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  freeling::ner *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (freeling::ner *)new freeling::ner((std::wstring const &)*arg1);
  *(freeling::ner **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Ner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::ner *arg1 = (freeling::ner *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::ner **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Ner_1analyze_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::ner *arg1 = (freeling::ner *) 0 ;
  freeling::sentence *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::ner **)&jarg1; 
  arg2 = *(freeling::sentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sentence & reference is null");
    return ;
  } 
  ((freeling::ner const *)arg1)->analyze(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Ner_1analyze_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::ner *arg1 = (freeling::ner *) 0 ;
  std::list< freeling::sentence > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::ner **)&jarg1; 
  arg2 = *(std::list< freeling::sentence > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::sentence > & reference is null");
    return ;
  } 
  ((freeling::ner const *)arg1)->analyze(*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Quantities(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  freeling::quantities *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (freeling::quantities *)new freeling::quantities((std::wstring const &)*arg1,(std::wstring const &)*arg2);
  *(freeling::quantities **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Quantities(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::quantities *arg1 = (freeling::quantities *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::quantities **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Quantities_1analyze_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::quantities *arg1 = (freeling::quantities *) 0 ;
  freeling::sentence *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::quantities **)&jarg1; 
  arg2 = *(freeling::sentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sentence & reference is null");
    return ;
  } 
  ((freeling::quantities const *)arg1)->analyze(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Quantities_1analyze_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::quantities *arg1 = (freeling::quantities *) 0 ;
  std::list< freeling::sentence > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::quantities **)&jarg1; 
  arg2 = *(std::list< freeling::sentence > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::sentence > & reference is null");
    return ;
  } 
  ((freeling::quantities const *)arg1)->analyze(*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Probabilities(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  double arg2 ;
  freeling::probabilities *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  arg2 = (double)jarg2; 
  result = (freeling::probabilities *)new freeling::probabilities((std::wstring const &)*arg1,arg2);
  *(freeling::probabilities **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Probabilities(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::probabilities *arg1 = (freeling::probabilities *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::probabilities **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Probabilities_1annotateWord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::probabilities *arg1 = (freeling::probabilities *) 0 ;
  freeling::word *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::probabilities **)&jarg1; 
  arg2 = *(freeling::word **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::word & reference is null");
    return ;
  } 
  ((freeling::probabilities const *)arg1)->annotate_word(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Probabilities_1setActivateGuesser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  freeling::probabilities *arg1 = (freeling::probabilities *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::probabilities **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_activate_guesser(arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Probabilities_1analyze_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::probabilities *arg1 = (freeling::probabilities *) 0 ;
  freeling::sentence *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::probabilities **)&jarg1; 
  arg2 = *(freeling::sentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sentence & reference is null");
    return ;
  } 
  ((freeling::probabilities const *)arg1)->analyze(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Probabilities_1analyze_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::probabilities *arg1 = (freeling::probabilities *) 0 ;
  std::list< freeling::sentence > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::probabilities **)&jarg1; 
  arg2 = *(std::list< freeling::sentence > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::sentence > & reference is null");
    return ;
  } 
  ((freeling::probabilities const *)arg1)->analyze(*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1HmmTagger_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  bool arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  freeling::hmm_tagger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  arg2 = jarg2 ? true : false; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (freeling::hmm_tagger *)new freeling::hmm_tagger((std::wstring const &)*arg1,arg2,arg3,arg4);
  *(freeling::hmm_tagger **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1HmmTagger_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  bool arg2 ;
  unsigned int arg3 ;
  freeling::hmm_tagger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  arg2 = jarg2 ? true : false; 
  arg3 = (unsigned int)jarg3; 
  result = (freeling::hmm_tagger *)new freeling::hmm_tagger((std::wstring const &)*arg1,arg2,arg3);
  *(freeling::hmm_tagger **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1HmmTagger(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::hmm_tagger *arg1 = (freeling::hmm_tagger *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::hmm_tagger **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_edu_upc_freeling_freelingJNI_HmmTagger_1sequenceProbLog_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jdouble jresult = 0 ;
  freeling::hmm_tagger *arg1 = (freeling::hmm_tagger *) 0 ;
  freeling::sentence *arg2 = 0 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::hmm_tagger **)&jarg1; 
  arg2 = *(freeling::sentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sentence const & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (double)((freeling::hmm_tagger const *)arg1)->SequenceProb_log((freeling::sentence const &)*arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_edu_upc_freeling_freelingJNI_HmmTagger_1sequenceProbLog_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  freeling::hmm_tagger *arg1 = (freeling::hmm_tagger *) 0 ;
  freeling::sentence *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::hmm_tagger **)&jarg1; 
  arg2 = *(freeling::sentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sentence const & reference is null");
    return 0;
  } 
  result = (double)((freeling::hmm_tagger const *)arg1)->SequenceProb_log((freeling::sentence const &)*arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_HmmTagger_1analyze_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::hmm_tagger *arg1 = (freeling::hmm_tagger *) 0 ;
  freeling::sentence *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::hmm_tagger **)&jarg1; 
  arg2 = *(freeling::sentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sentence & reference is null");
    return ;
  } 
  ((freeling::hmm_tagger const *)arg1)->analyze(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_HmmTagger_1analyze_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::hmm_tagger *arg1 = (freeling::hmm_tagger *) 0 ;
  std::list< freeling::sentence > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::hmm_tagger **)&jarg1; 
  arg2 = *(std::list< freeling::sentence > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::sentence > & reference is null");
    return ;
  } 
  ((freeling::hmm_tagger const *)arg1)->analyze(*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1RelaxTagger(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jdouble jarg3, jdouble jarg4, jboolean jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  bool arg5 ;
  unsigned int arg6 ;
  freeling::relax_tagger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (unsigned int)jarg6; 
  result = (freeling::relax_tagger *)new freeling::relax_tagger((std::wstring const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  *(freeling::relax_tagger **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1RelaxTagger(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::relax_tagger *arg1 = (freeling::relax_tagger *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::relax_tagger **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_RelaxTagger_1analyze_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::relax_tagger *arg1 = (freeling::relax_tagger *) 0 ;
  freeling::sentence *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::relax_tagger **)&jarg1; 
  arg2 = *(freeling::sentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sentence & reference is null");
    return ;
  } 
  ((freeling::relax_tagger const *)arg1)->analyze(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_RelaxTagger_1analyze_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::relax_tagger *arg1 = (freeling::relax_tagger *) 0 ;
  std::list< freeling::sentence > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::relax_tagger **)&jarg1; 
  arg2 = *(std::list< freeling::sentence > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::sentence > & reference is null");
    return ;
  } 
  ((freeling::relax_tagger const *)arg1)->analyze(*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Alternatives(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  freeling::alternatives *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (freeling::alternatives *)new freeling::alternatives((std::wstring const &)*arg1);
  *(freeling::alternatives **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Alternatives(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::alternatives *arg1 = (freeling::alternatives *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::alternatives **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Alternatives_1getSimilarWords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  freeling::alternatives *arg1 = (freeling::alternatives *) 0 ;
  std::wstring *arg2 = 0 ;
  std::list< std::pair< std::wstring,int > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::alternatives **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(std::list< std::pair< std::wstring,int > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::pair< std::wstring,int > > & reference is null");
    return ;
  } 
  ((freeling::alternatives const *)arg1)->get_similar_words((std::wstring const &)*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Alternatives_1analyze_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::alternatives *arg1 = (freeling::alternatives *) 0 ;
  freeling::sentence *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::alternatives **)&jarg1; 
  arg2 = *(freeling::sentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sentence & reference is null");
    return ;
  } 
  ((freeling::alternatives const *)arg1)->analyze(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Alternatives_1analyze_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::alternatives *arg1 = (freeling::alternatives *) 0 ;
  std::list< freeling::sentence > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::alternatives **)&jarg1; 
  arg2 = *(std::list< freeling::sentence > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::sentence > & reference is null");
    return ;
  } 
  ((freeling::alternatives const *)arg1)->analyze(*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Phonetics(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  freeling::phonetics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (freeling::phonetics *)new freeling::phonetics((std::wstring const &)*arg1);
  *(freeling::phonetics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Phonetics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::phonetics *arg1 = (freeling::phonetics *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::phonetics **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Phonetics_1getSound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  freeling::phonetics *arg1 = (freeling::phonetics *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::phonetics **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = ((freeling::phonetics const *)arg1)->get_sound((std::wstring const &)*arg2);
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Phonetics_1analyze_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::phonetics *arg1 = (freeling::phonetics *) 0 ;
  freeling::sentence *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::phonetics **)&jarg1; 
  arg2 = *(freeling::sentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sentence & reference is null");
    return ;
  } 
  ((freeling::phonetics const *)arg1)->analyze(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Phonetics_1analyze_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::phonetics *arg1 = (freeling::phonetics *) 0 ;
  std::list< freeling::sentence > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::phonetics **)&jarg1; 
  arg2 = *(std::list< freeling::sentence > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::sentence > & reference is null");
    return ;
  } 
  ((freeling::phonetics const *)arg1)->analyze(*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Nec(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  freeling::nec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (freeling::nec *)new freeling::nec((std::wstring const &)*arg1);
  *(freeling::nec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Nec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::nec *arg1 = (freeling::nec *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::nec **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Nec_1analyze_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::nec *arg1 = (freeling::nec *) 0 ;
  freeling::sentence *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::nec **)&jarg1; 
  arg2 = *(freeling::sentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sentence & reference is null");
    return ;
  } 
  ((freeling::nec const *)arg1)->analyze(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Nec_1analyze_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::nec *arg1 = (freeling::nec *) 0 ;
  std::list< freeling::sentence > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::nec **)&jarg1; 
  arg2 = *(std::list< freeling::sentence > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::sentence > & reference is null");
    return ;
  } 
  ((freeling::nec const *)arg1)->analyze(*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1ChartParser(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  freeling::chart_parser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (freeling::chart_parser *)new freeling::chart_parser((std::wstring const &)*arg1);
  *(freeling::chart_parser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1ChartParser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::chart_parser *arg1 = (freeling::chart_parser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::chart_parser **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_ChartParser_1getStartSymbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::chart_parser *arg1 = (freeling::chart_parser *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::chart_parser **)&jarg1; 
  result = ((freeling::chart_parser const *)arg1)->get_start_symbol();
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ChartParser_1analyze_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::chart_parser *arg1 = (freeling::chart_parser *) 0 ;
  freeling::sentence *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::chart_parser **)&jarg1; 
  arg2 = *(freeling::sentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sentence & reference is null");
    return ;
  } 
  ((freeling::chart_parser const *)arg1)->analyze(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_ChartParser_1analyze_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::chart_parser *arg1 = (freeling::chart_parser *) 0 ;
  std::list< freeling::sentence > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::chart_parser **)&jarg1; 
  arg2 = *(std::list< freeling::sentence > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::sentence > & reference is null");
    return ;
  } 
  ((freeling::chart_parser const *)arg1)->analyze(*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1DepTxala(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  freeling::dep_txala *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (freeling::dep_txala *)new freeling::dep_txala((std::wstring const &)*arg1,(std::wstring const &)*arg2);
  *(freeling::dep_txala **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1DepTxala(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::dep_txala *arg1 = (freeling::dep_txala *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::dep_txala **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_DepTxala_1analyze_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::dep_txala *arg1 = (freeling::dep_txala *) 0 ;
  freeling::sentence *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::dep_txala **)&jarg1; 
  arg2 = *(freeling::sentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sentence & reference is null");
    return ;
  } 
  ((freeling::dep_txala const *)arg1)->analyze(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_DepTxala_1analyze_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::dep_txala *arg1 = (freeling::dep_txala *) 0 ;
  std::list< freeling::sentence > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::dep_txala **)&jarg1; 
  arg2 = *(std::list< freeling::sentence > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::sentence > & reference is null");
    return ;
  } 
  ((freeling::dep_txala const *)arg1)->analyze(*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Senses(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  freeling::senses *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (freeling::senses *)new freeling::senses((std::wstring const &)*arg1);
  *(freeling::senses **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Senses(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::senses *arg1 = (freeling::senses *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::senses **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Senses_1analyze_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::senses *arg1 = (freeling::senses *) 0 ;
  freeling::sentence *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::senses **)&jarg1; 
  arg2 = *(freeling::sentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sentence & reference is null");
    return ;
  } 
  ((freeling::senses const *)arg1)->analyze(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Senses_1analyze_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::senses *arg1 = (freeling::senses *) 0 ;
  std::list< freeling::sentence > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::senses **)&jarg1; 
  arg2 = *(std::list< freeling::sentence > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::sentence > & reference is null");
    return ;
  } 
  ((freeling::senses const *)arg1)->analyze(*arg2);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Ukb(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  freeling::ukb *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (freeling::ukb *)new freeling::ukb((std::wstring const &)*arg1);
  *(freeling::ukb **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Ukb(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::ukb *arg1 = (freeling::ukb *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::ukb **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Ukb_1analyze_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::ukb *arg1 = (freeling::ukb *) 0 ;
  freeling::sentence *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::ukb **)&jarg1; 
  arg2 = *(freeling::sentence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "freeling::sentence & reference is null");
    return ;
  } 
  ((freeling::ukb const *)arg1)->analyze(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Ukb_1analyze_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::ukb *arg1 = (freeling::ukb *) 0 ;
  std::list< freeling::sentence > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::ukb **)&jarg1; 
  arg2 = *(std::list< freeling::sentence > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< freeling::sentence > & reference is null");
    return ;
  } 
  ((freeling::ukb const *)arg1)->analyze(*arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_SenseInfo_1sense_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sense_info **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->sense = *arg2;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_SenseInfo_1sense_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  std::wstring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sense_info **)&jarg1; 
  result = (std::wstring *) & ((arg1)->sense);
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_SenseInfo_1parents_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  std::list< std::wstring > *arg2 = (std::list< std::wstring > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::sense_info **)&jarg1; 
  arg2 = *(std::list< std::wstring > **)&jarg2; 
  if (arg1) (arg1)->parents = *arg2;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_SenseInfo_1parents_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  std::list< std::wstring > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sense_info **)&jarg1; 
  result = (std::list< std::wstring > *)& ((arg1)->parents);
  *(std::list< std::wstring > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_SenseInfo_1semfile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sense_info **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->semfile = *arg2;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_SenseInfo_1semfile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  std::wstring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sense_info **)&jarg1; 
  result = (std::wstring *) & ((arg1)->semfile);
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_SenseInfo_1words_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  std::list< std::wstring > *arg2 = (std::list< std::wstring > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::sense_info **)&jarg1; 
  arg2 = *(std::list< std::wstring > **)&jarg2; 
  if (arg1) (arg1)->words = *arg2;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_SenseInfo_1words_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  std::list< std::wstring > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sense_info **)&jarg1; 
  result = (std::list< std::wstring > *)& ((arg1)->words);
  *(std::list< std::wstring > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_SenseInfo_1tonto_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  std::list< std::wstring > *arg2 = (std::list< std::wstring > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(freeling::sense_info **)&jarg1; 
  arg2 = *(std::list< std::wstring > **)&jarg2; 
  if (arg1) (arg1)->tonto = *arg2;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_SenseInfo_1tonto_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  std::list< std::wstring > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sense_info **)&jarg1; 
  result = (std::list< std::wstring > *)& ((arg1)->tonto);
  *(std::list< std::wstring > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1SenseInfo(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  freeling::sense_info *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (freeling::sense_info *)new freeling::sense_info((std::wstring const &)*arg1,(std::wstring const &)*arg2);
  *(freeling::sense_info **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_SenseInfo_1getParentsString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::sense_info **)&jarg1; 
  result = ((freeling::sense_info const *)arg1)->get_parents_string();
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1SenseInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::sense_info **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1SemanticDB(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  freeling::semanticDB *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (freeling::semanticDB *)new freeling::semanticDB((std::wstring const &)*arg1);
  *(freeling::semanticDB **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1SemanticDB(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::semanticDB *arg1 = (freeling::semanticDB *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::semanticDB **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_SemanticDB_1getWNKeys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5) {
  freeling::semanticDB *arg1 = (freeling::semanticDB *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring *arg4 = 0 ;
  std::list< std::pair< std::wstring,std::wstring > > *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::semanticDB **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return ;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  std::wstring arg4_str;
  if (arg4_len) {
    arg4_str.reserve(arg4_len);
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4_str.push_back((wchar_t)arg4_pstr[i]);
    }
  }
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  arg5 = *(std::list< std::pair< std::wstring,std::wstring > > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::pair< std::wstring,std::wstring > > & reference is null");
    return ;
  } 
  ((freeling::semanticDB const *)arg1)->get_WN_keys((std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4,*arg5);
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_SemanticDB_1getSenseWords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  freeling::semanticDB *arg1 = (freeling::semanticDB *) 0 ;
  std::wstring *arg2 = 0 ;
  std::list< std::wstring > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::semanticDB **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = ((freeling::semanticDB const *)arg1)->get_sense_words((std::wstring const &)*arg2);
  *(std::list< std::wstring > **)&jresult = new std::list< std::wstring >((const std::list< std::wstring > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_SemanticDB_1getWordSenses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  freeling::semanticDB *arg1 = (freeling::semanticDB *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring *arg4 = 0 ;
  std::list< std::wstring > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::semanticDB **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  std::wstring arg4_str;
  if (arg4_len) {
    arg4_str.reserve(arg4_len);
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4_str.push_back((wchar_t)arg4_pstr[i]);
    }
  }
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  result = ((freeling::semanticDB const *)arg1)->get_word_senses((std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4);
  *(std::list< std::wstring > **)&jresult = new std::list< std::wstring >((const std::list< std::wstring > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_SemanticDB_1getSenseInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  freeling::semanticDB *arg1 = (freeling::semanticDB *) 0 ;
  std::wstring *arg2 = 0 ;
  SwigValueWrapper< freeling::sense_info > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::semanticDB **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = ((freeling::semanticDB const *)arg1)->get_sense_info((std::wstring const &)*arg2);
  *(freeling::sense_info **)&jresult = new freeling::sense_info((const freeling::sense_info &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Tagset(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  freeling::tagset *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (freeling::tagset *)new freeling::tagset((std::wstring const &)*arg1);
  *(freeling::tagset **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Tagset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::tagset *arg1 = (freeling::tagset *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::tagset **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Tagset_1getShortTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  freeling::tagset *arg1 = (freeling::tagset *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tagset **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = ((freeling::tagset const *)arg1)->get_short_tag((std::wstring const &)*arg2);
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Tagset_1getMsfFeatures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  freeling::tagset *arg1 = (freeling::tagset *) 0 ;
  std::wstring *arg2 = 0 ;
  SwigValueWrapper< std::list< std::pair< std::wstring,std::wstring > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tagset **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = ((freeling::tagset const *)arg1)->get_msf_features((std::wstring const &)*arg2);
  *(std::list< std::pair< std::wstring,std::wstring > > **)&jresult = new std::list< std::pair< std::wstring,std::wstring > >((const std::list< std::pair< std::wstring,std::wstring > > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Tagset_1getMsfString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  freeling::tagset *arg1 = (freeling::tagset *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::tagset **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = ((freeling::tagset const *)arg1)->get_msf_string((std::wstring const &)*arg2);
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1FomaFSM_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  freeling::foma_FSM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (freeling::foma_FSM *)new freeling::foma_FSM((std::wstring const &)*arg1,(std::wstring const &)*arg2);
  *(freeling::foma_FSM **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1FomaFSM_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  freeling::foma_FSM *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (freeling::foma_FSM *)new freeling::foma_FSM((std::wstring const &)*arg1);
  *(freeling::foma_FSM **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1FomaFSM(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::foma_FSM *arg1 = (freeling::foma_FSM *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::foma_FSM **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_FomaFSM_1getSimilarWords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  freeling::foma_FSM *arg1 = (freeling::foma_FSM *) 0 ;
  std::wstring *arg2 = 0 ;
  std::list< std::pair< std::wstring,int > > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::foma_FSM **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(std::list< std::pair< std::wstring,int > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::pair< std::wstring,int > > & reference is null");
    return ;
  } 
  ((freeling::foma_FSM const *)arg1)->get_similar_words((std::wstring const &)*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_FomaFSM_1setCutoffThreshold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  freeling::foma_FSM *arg1 = (freeling::foma_FSM *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::foma_FSM **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->set_cutoff_threshold(arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_FomaFSM_1setNumMatches(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  freeling::foma_FSM *arg1 = (freeling::foma_FSM *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::foma_FSM **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->set_num_matches(arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_FomaFSM_1setBasicOperationCost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  freeling::foma_FSM *arg1 = (freeling::foma_FSM *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(freeling::foma_FSM **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->set_basic_operation_cost(arg2);
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_Util_1initLocale(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::wstring *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return ;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  freeling::util::init_locale((std::wstring const &)*arg1);
}


SWIGEXPORT jint JNICALL Java_edu_upc_freeling_freelingJNI_Util_1wstring2int(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::wstring *arg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (int)freeling::util::wstring2int((std::wstring const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Util_1int2wstring(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = freeling::util::int2wstring(arg1);
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_edu_upc_freeling_freelingJNI_Util_1wstring2double(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jdouble jresult = 0 ;
  std::wstring *arg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (double)freeling::util::wstring2double((std::wstring const &)*arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Util_1double2wstring(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jstring jresult = 0 ;
  double arg1 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = freeling::util::double2wstring(arg1);
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Util_1wstring2longdouble(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  long double result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (long double)freeling::util::wstring2longdouble((std::wstring const &)*arg1);
  *(long double **)&jresult = new long double((const long double &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Util_1longdouble2wstring(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  long double arg1 ;
  long double const *argp1 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(long double **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null long double const");
    return 0;
  }
  arg1 = *argp1; 
  result = freeling::util::longdouble2wstring(arg1);
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Util_1vector2wstring(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  std::vector< std::wstring > *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::wstring > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::wstring > const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = freeling::util::vector2wstring((std::vector< std::wstring > const &)*arg1,(std::wstring const &)*arg2);
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Util_1list2wstring(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  std::list< std::wstring > *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::wstring > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::wstring > const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = freeling::util::list2wstring((std::list< std::wstring > const &)*arg1,(std::wstring const &)*arg2);
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Util_1pairlist2wstring_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  std::list< std::pair< std::wstring,double > > *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< std::pair< std::wstring,double > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::pair< std::wstring,double > > const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  result = freeling::util::pairlist2wstring((std::list< std::pair< std::wstring,double > > const &)*arg1,(std::wstring const &)*arg2,(std::wstring const &)*arg3);
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_upc_freeling_freelingJNI_Util_1pairlist2wstring_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  std::list< std::pair< std::wstring,std::wstring > > *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< std::pair< std::wstring,std::wstring > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::pair< std::wstring,std::wstring > > const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  result = freeling::util::pairlist2wstring((std::list< std::pair< std::wstring,std::wstring > > const &)*arg1,(std::wstring const &)*arg2,(std::wstring const &)*arg3);
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Util_1wstring2list(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  std::list< std::wstring > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = freeling::util::wstring2list((std::wstring const &)*arg1,(std::wstring const &)*arg2);
  *(std::list< std::wstring > **)&jresult = new std::list< std::wstring >((const std::list< std::wstring > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Util_1wstring2vector(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  std::vector< std::wstring > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = freeling::util::wstring2vector((std::wstring const &)*arg1,(std::wstring const &)*arg2);
  *(std::vector< std::wstring > **)&jresult = new std::vector< std::wstring >((const std::vector< std::wstring > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_new_1Util(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  freeling::util *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (freeling::util *)new freeling::util();
  *(freeling::util **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_upc_freeling_freelingJNI_delete_1Util(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  freeling::util *arg1 = (freeling::util *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(freeling::util **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorNode_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(freeling::tree_iterator< freeling::node,freeling::tree< freeling::node > > **)&baseptr = *(freeling::generic_iterator< freeling::node > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_PreorderIteratorNode_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(freeling::generic_iterator< freeling::node > **)&baseptr = *(freeling::preorder_iterator< freeling::node > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_SiblingIteratorNode_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(freeling::generic_iterator< freeling::node > **)&baseptr = *(freeling::sibling_iterator< freeling::node > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_GenericIteratorDepnode_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(freeling::tree_iterator< freeling::depnode,freeling::tree< freeling::depnode > > **)&baseptr = *(freeling::generic_iterator< freeling::depnode > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_PreorderIteratorDepnode_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(freeling::generic_iterator< freeling::depnode > **)&baseptr = *(freeling::preorder_iterator< freeling::depnode > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_SiblingIteratorDepnode_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(freeling::generic_iterator< freeling::depnode > **)&baseptr = *(freeling::sibling_iterator< freeling::depnode > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Word_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(std::list< freeling::analysis > **)&baseptr = *(freeling::word **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_ParseTree_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(freeling::tree< freeling::node > **)&baseptr = *(freeling::parse_tree **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Depnode_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(freeling::node **)&baseptr = *(freeling::depnode **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_DepTree_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(freeling::tree< freeling::depnode > **)&baseptr = *(freeling::dep_tree **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Sentence_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(std::list< freeling::word > **)&baseptr = *(freeling::sentence **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Paragraph_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(std::list< freeling::sentence > **)&baseptr = *(freeling::paragraph **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_edu_upc_freeling_freelingJNI_Document_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(std::list< freeling::paragraph > **)&baseptr = *(freeling::document **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

